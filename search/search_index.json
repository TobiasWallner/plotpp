{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Plotpp","text":""},{"location":"#plotpp","title":"Plotpp","text":"<p>A plotting library for C++ that uses Gnuplot as a backend. Allows plotting from custom containers/vectors if they use <code>begin()</code> and <code>end()</code> iterators as well as plotting from built in arrays.</p> <p>Documentation</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Gnuplot: Homepage Windows Download Linux install: Note: The project can be build without gnuplot,     since this library will only communicate with gnuplot through pipes.      But you will need gnuplot to display the graphical plots.</li> <li>C++20</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>{fmt}: GitHub, Documentation, Conan</li> </ul>"},{"location":"#example","title":"Example","text":"OutputCode <pre><code>#include &lt;vector&gt;\n#include &lt;plotpp.hpp&gt;\n\n#include \"functions.hpp\" //linspace, apply_func\n\nint main() {\n\n    std::vector&lt;float&gt; x = linspace&lt;float&gt;(-2, 2, 100);\n    std::vector&lt;double&gt; y = apply_func(x, [](double x){return -x + x * x * x;});\n\n    using namespace plotpp;\n\n    Figure fig(\"Line Plot from XY\");\n    fig.add(line(&amp;x, std::move(y)).label(\"f1\"));\n    fig.grid();\n    fig.show();\n    fig.save(\"line-plot.svg\");\n\n    return 0;\n}\n</code></pre>"},{"location":"#integration","title":"Integration","text":""},{"location":"#cmake-cpm","title":"CMake: CPM","text":"<p>Get and include the CPM script, then use <code>CPMAddPackage()</code> to add git repositories as libraries to your project</p> <pre><code>include(CPM.cmake)\n\nCPMAddPackage(\"gh:TobiasWallner/plotpp#main\")\n\ntarget_link_libraries(YOUR_PROJECT_NAME PUBLIC plotpp)\n</code></pre> <p>Optionally: set a download cache for your libraries by setting the environment variable <code>CPM_SOURCE_CACHE</code> to a directory of your choice</p>"},{"location":"#cmake-add-subdirectory","title":"CMake: Add Subdirectory","text":"<p>clone plotpp into your project <pre><code>git clone https://github.com/TobiasWallner/plotpp.git\n</code></pre></p> <p>include the project into CMake via <code>add_subdirectory</code> <pre><code>add_subdirectory(Path/to/plotpp)\n\ntarget_link_libraries(YOUR_PROJECT_NAME PUBLIC plotpp)\n</code></pre></p>"},{"location":"API/Classes/","title":"Classes","text":"<ul> <li>namespace fmt <ul> <li>struct formatter&lt; plotpp::ArrowHeadStyle &gt; formats plotpp::ArrowHeadStyle for {fmt} strings. </li> <li>struct formatter&lt; plotpp::Color &gt; </li> <li>struct formatter&lt; plotpp::FillStyle &gt; </li> <li>struct formatter&lt; plotpp::LineType &gt; </li> <li>struct formatter&lt; plotpp::PlotTitle &gt; </li> <li>struct formatter&lt; plotpp::PointType &gt; </li> <li>struct formatter&lt; plotpp::Text &gt; </li> <li>struct formatter&lt; std::optional&lt; plotpp::Color &gt; &gt; </li> </ul> </li> <li>class optional_ptr </li> <li>namespace plotpp The libraries main-namespace. <ul> <li>class Arrows class for plotting arrows/vectors/quivers in plotpp::Figure</li> <li>class Boxes class for plotting boxes into a plotpp::Figure</li> <li>class Boxplot </li> <li>class Circle </li> <li>class Color </li> <li>class Figure </li> <li>class FillStyle </li> <li>class Filledcurves </li> <li>class Heatmap </li> <li>class IPlot </li> <li>class Impulses </li> <li>class Line Represents a line plot from x- and y-coordiantes. </li> <li>class Multiplot </li> <li>class Piechart </li> <li>struct PlotTitle </li> <li>class Points Represents a point plot from x- and y-coordiantes. </li> <li>class Steps </li> <li>class Text </li> <li>class XError </li> <li>class XYError </li> <li>class YError </li> <li>class YErrorLine Represents a YErrorLine plot from x- and y-coordiantes. </li> <li>namespace color_map </li> </ul> </li> <li>struct remove_ptr </li> <li>struct remove_ptr&lt; optional_ptr&lt; T &gt; &gt; </li> <li>struct remove_ptr&lt; std::shared_ptr&lt; T &gt; &gt; </li> <li>struct remove_ptr&lt; std::unique_ptr&lt; T &gt; &gt; </li> <li>struct remove_ptr&lt; std::weak_ptr&lt; T &gt; &gt; </li> <li>struct remove_smart_ptr </li> <li>struct remove_smart_ptr&lt; optional_ptr&lt; T &gt; &gt; </li> <li>struct remove_smart_ptr&lt; std::shared_ptr&lt; T &gt; &gt; </li> <li>struct remove_smart_ptr&lt; std::unique_ptr&lt; T &gt; &gt; </li> <li>struct remove_smart_ptr&lt; std::weak_ptr&lt; T &gt; &gt; </li> </ul> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classoptional__ptr/","title":"optional_ptr","text":"<p>More...</p>"},{"location":"API/Classes/classoptional__ptr/#public-types","title":"Public Types","text":"Name using T element_type"},{"location":"API/Classes/classoptional__ptr/#public-functions","title":"Public Functions","text":"Name optional_ptr() optional_ptr(T &amp;&amp; ref) optional_ptr(T * ptr) optional_ptr(std::shared_ptr&lt; T &gt; ptr) optional_ptr(const optional_ptr &amp; ) =default optional_ptr &amp; operator=(const optional_ptr &amp; ) =default optional_ptr(optional_ptr &amp;&amp; ) =default optional_ptr &amp; operator=(optional_ptr &amp;&amp; ) =default T &amp; operator*() const T * operator-&gt;() const T * get() const operator bool() const"},{"location":"API/Classes/classoptional__ptr/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nclass optional_ptr;\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/classoptional__ptr/#using-element_type","title":"using element_type","text":"<pre><code>using optional_ptr&lt; T &gt;::element_type =  T;\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classoptional__ptr/#function-optional_ptr","title":"function optional_ptr","text":"<pre><code>inline optional_ptr()\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-optional_ptr_1","title":"function optional_ptr","text":"<pre><code>inline optional_ptr(\n    T &amp;&amp; ref\n)\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-optional_ptr_2","title":"function optional_ptr","text":"<pre><code>inline optional_ptr(\n    T * ptr\n)\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-optional_ptr_3","title":"function optional_ptr","text":"<pre><code>inline optional_ptr(\n    std::shared_ptr&lt; T &gt; ptr\n)\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-optional_ptr_4","title":"function optional_ptr","text":"<pre><code>inline optional_ptr(\n    const optional_ptr &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-operator","title":"function operator=","text":"<pre><code>inline optional_ptr &amp; operator=(\n    const optional_ptr &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-optional_ptr_5","title":"function optional_ptr","text":"<pre><code>inline optional_ptr(\n    optional_ptr &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-operator_1","title":"function operator=","text":"<pre><code>inline optional_ptr &amp; operator=(\n    optional_ptr &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-operator_2","title":"function operator*","text":"<pre><code>inline T &amp; operator*() const\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-operator-","title":"function operator-&gt;","text":"<pre><code>inline T * operator-&gt;() const\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-get","title":"function get","text":"<pre><code>inline T * get() const\n</code></pre>"},{"location":"API/Classes/classoptional__ptr/#function-operator-bool","title":"function operator bool","text":"<pre><code>inline operator bool() const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_arrows/","title":"plotpp::Arrows","text":"<p>class for plotting arrows/vectors/quivers in plotpp::Figure More...</p> <p><code>#include &lt;Arrows.hpp&gt;</code></p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#public-functions","title":"Public Functions","text":"Name Arrows(optional_ptr&lt; const Tx1 &gt; x1, optional_ptr&lt; const Ty1 &gt; y1, optional_ptr&lt; const Tx2 &gt; x2, optional_ptr&lt; const Ty2 &gt; y2)Constructs an Arrow from x and y data for plotting plotpp::Figure. Arrows &amp; label(const char * label)adds a label to the plot which can be seen in legends Arrows &amp;&amp; label(const char * label) Arrows &amp; label(std::string_view label) Arrows &amp;&amp; label(std::string_view label) Arrows &amp; label(std::string &amp;&amp; label) Arrows &amp;&amp; label(std::string &amp;&amp; label) float lineWidth() const Arrows &amp; lineWidth(float lw)Changes the width of the line. Arrows &amp;&amp; lineWidth(float lw) DataRelation dataRelation() constReturns the relation of [x2, y2]. Arrows &amp; dataRelation(DataRelation dr)Changes the relation of the start and end data points. Arrows &amp;&amp; dataRelation(DataRelation dr) ArrowHeadStyle arrowHeadStyle() const Arrows &amp; arrowHeadStyle(ArrowHeadStyle ahs) Arrows &amp;&amp; arrowHeadStyle(ArrowHeadStyle ahs) Color color() const Arrows &amp; color(Color col)Sets the color of the line. Arrows &amp;&amp; color(Color col) virtual void printPlot(FILE * fptr) constPrints the plot command for gnuplot. virtual void printData(FILE * fptr) constPrints the data for gnuplot."},{"location":"API/Classes/classplotpp_1_1_arrows/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_arrows/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;std::ranges::forward_range Tx1,\nstd::ranges::forward_range Ty1,\nstd::ranges::forward_range Tx2,\nstd::ranges::forward_range Ty2&gt;\nclass plotpp::Arrows;\n</code></pre> <p>class for plotting arrows/vectors/quivers in plotpp::Figure</p> <p>Template Parameters: </p> <ul> <li>Tx1Ty1Tx2Ty2 Generic types that store the data for plotting and are forward ranges (aka. have <code>begin()</code> and <code>end()</code> iterators)</li> </ul> <p>Arrows contains the start and end coordinates for vectors. The relationship between the datasets ([x1, y1] and [x2, y2]) can be set using plotpp::DataRelation. In every case [x1, y1] will be the absolute start coordinate of the vector and [x2, y2] can the absolute end coordinate or relative to the start.</p> <p>To construct arrows/vectors/quivers See</p> <ul> <li>arrows(U1&amp;&amp; x1, U2&amp;&amp; y1, U3&amp;&amp; x2, U4&amp;&amp; y2), absolute coordinates</li> <li>vector(U1&amp;&amp; x1, U2&amp;&amp; y1, U3&amp;&amp; x2, U4&amp;&amp; y2), alias for arrows()</li> <li>quiver(U1&amp;&amp; x1, U2&amp;&amp; y1, U3&amp;&amp; x2, U4&amp;&amp; y2), relative coordinates </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_arrows/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_arrows/#function-arrows","title":"function Arrows","text":"<pre><code>inline Arrows(\n    optional_ptr&lt; const Tx1 &gt; x1,\n    optional_ptr&lt; const Ty1 &gt; y1,\n    optional_ptr&lt; const Tx2 &gt; x2,\n    optional_ptr&lt; const Ty2 &gt; y2\n)\n</code></pre> <p>Constructs an Arrow from x and y data for plotting plotpp::Figure. </p> <p>Parameters: </p> <ul> <li>x1y1 the start coordinates of the vector </li> <li>x2y2 the end coordinates of the vector. Can be absolute or relative. </li> </ul> <p>For easier construction use the following functions instead. They will automatically create the correct optional_ptr type.</p> <ul> <li>arrows(U1&amp;&amp; x1, U2&amp;&amp; y1, U3&amp;&amp; x2, U4&amp;&amp; y2), absolute coordinates</li> <li>vector(U1&amp;&amp; x1, U2&amp;&amp; y1, U3&amp;&amp; x2, U4&amp;&amp; y2), alias for arrows()</li> <li>quiver(U1&amp;&amp; x1, U2&amp;&amp; y1, U3&amp;&amp; x2, U4&amp;&amp; y2), relative coordinates</li> </ul>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-label","title":"function label","text":"<pre><code>inline Arrows &amp; label(\n    const char * label\n)\n</code></pre> <p>adds a label to the plot which can be seen in legends </p> <p>Parameters: </p> <ul> <li>label a string to set the label name shown in the legend </li> </ul> <p>Return: the class itself for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-label_1","title":"function label","text":"<pre><code>inline Arrows &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-label_2","title":"function label","text":"<pre><code>inline Arrows &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-label_3","title":"function label","text":"<pre><code>inline Arrows &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-label_4","title":"function label","text":"<pre><code>inline Arrows &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-label_5","title":"function label","text":"<pre><code>inline Arrows &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-linewidth","title":"function lineWidth","text":"<pre><code>inline float lineWidth() const\n</code></pre> <p>Return: The line width </p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-linewidth_1","title":"function lineWidth","text":"<pre><code>inline Arrows &amp; lineWidth(\n    float lw\n)\n</code></pre> <p>Changes the width of the line. </p> <p>Parameters: </p> <ul> <li>lw The new linewidth </li> </ul> <p>Return: The class itself for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-linewidth_2","title":"function lineWidth","text":"<pre><code>inline Arrows &amp;&amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-datarelation","title":"function dataRelation","text":"<pre><code>inline DataRelation dataRelation() const\n</code></pre> <p>Returns the relation of [x2, y2]. </p> <p>Return: DataRelation</p> <ul> <li><code>DataRelation::absolute</code> if the end coordinates [x2, y2] are absolute to the origin of the Figure</li> <li><code>DataRelation::relative</code> if the end coordinates [x2, y2] are relative to [x1, y1] </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-datarelation_1","title":"function dataRelation","text":"<pre><code>inline Arrows &amp; dataRelation(\n    DataRelation dr\n)\n</code></pre> <p>Changes the relation of the start and end data points. </p> <p>The relationship of the start [x1, y1] coordinates and end [x2, y2] coordinates can be set with the enum plotpp::DataRelation. If set to</p> <ul> <li><code>DataRelation::absolute</code> [x2, y2] will be absolute to the origin of the plot</li> <li><code>DataRelation::relative</code> [x2, y2] will be relative to the start point [x1, y1]</li> <li>default is <code>DataRelation::absolute</code>lwThe new linewidth </li> </ul> <p>The Class itself for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-datarelation_2","title":"function dataRelation","text":"<pre><code>inline Arrows &amp;&amp; dataRelation(\n    DataRelation dr\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-arrowheadstyle","title":"function arrowHeadStyle","text":"<pre><code>inline ArrowHeadStyle arrowHeadStyle() const\n</code></pre> <p>Return: The style of the arrow head (plotpp::ArrowHeadStyle) </p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-arrowheadstyle_1","title":"function arrowHeadStyle","text":"<pre><code>inline Arrows &amp; arrowHeadStyle(\n    ArrowHeadStyle ahs\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-arrowheadstyle_2","title":"function arrowHeadStyle","text":"<pre><code>inline Arrows &amp;&amp; arrowHeadStyle(\n    ArrowHeadStyle ahs\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre> <p>Return: The color of the line (plotpp::Color) </p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-color_1","title":"function color","text":"<pre><code>inline Arrows &amp; color(\n    Color col\n)\n</code></pre> <p>Sets the color of the line. </p> <p>Return: The class itself for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-color_2","title":"function color","text":"<pre><code>inline Arrows &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const\n</code></pre> <p>Prints the plot command for gnuplot. </p> <p>Parameters: </p> <ul> <li>fptr The file or stream that the plot command should be written to </li> </ul> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_arrows/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const\n</code></pre> <p>Prints the data for gnuplot. </p> <p>Parameters: </p> <ul> <li>fptr The file or stream that the data should be written to </li> </ul> <p>Reimplements: plotpp::IPlot::printData</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_boxes/","title":"plotpp::Boxes","text":"<p>class for plotting boxes into a plotpp::Figure More...</p> <p><code>#include &lt;Boxes.hpp&gt;</code></p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#public-functions","title":"Public Functions","text":"Name Boxes(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y)Constructs boxes at x position with height y. Boxes &amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. Boxes &amp;&amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. Boxes &amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. Boxes &amp;&amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. float boxWidth() constreturns the width of the boxes as a float number Boxes &amp; boxWidth(float bw)sets the absolute width of the boxes Boxes &amp;&amp; boxWidth(float bw)sets the absolute width of the boxes bool isRelativeBoxWidth() const Boxes &amp; relativeBoxWidth(bool rbw =true)sets the box width to relative or absolute Boxes &amp;&amp; relativeBoxWidth(bool rbw =true)sets the box width to relative or absolute const FillStyle &amp; fill() const Boxes &amp; fillSolid(float opacity =0.6, bool transparent =false)sets the box fill style to a solid fillClear Boxes &amp;&amp; fillSolid(float opacity =0.6, bool transparent =false)sets the box fill style to a solid fillClear Boxes &amp; fillClear()removes any fill-styles Boxes &amp;&amp; fillClear()removes any fill-styles Boxes &amp; fillPattern(int n)uses a gnuplot fill pattern. May be useful for black and white printing. Boxes &amp;&amp; fillPattern(int n)uses a gnuplot fill pattern. May be useful for black and white printing. Boxes &amp; border(bool b =true)sets the border of the box Boxes &amp;&amp; border(bool b =true)sets the border of the box virtual void printSettings(FILE * fptr) const overrideprints extra commands that are not within the gnuplot plot command virtual void printData(FILE * fptr) const overrideprints the data for gnuplot virtual void printPlot(FILE * fptr) const overrideprints the plot command for gnuplot"},{"location":"API/Classes/classplotpp_1_1_boxes/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_boxes/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;class Tx ,\nclass Ty &gt;\nclass plotpp::Boxes;\n</code></pre> <p>class for plotting boxes into a plotpp::Figure</p> <p>Template Parameters: </p> <ul> <li>TxTy Generic types that store the data for plotting and are forward ranges (aka. have <code>begin()</code> and <code>end()</code> iterators)</li> </ul> <p>to construct boxes See:</p> <ul> <li>boxes(U1&amp;&amp; x, U2&amp;&amp; y)</li> <li>boxes(U2&amp;&amp; y) </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_boxes/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_boxes/#function-boxes","title":"function Boxes","text":"<pre><code>inline Boxes(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y\n)\n</code></pre> <p>Constructs boxes at x position with height y. </p> <p>Parameters: </p> <ul> <li>x optional_ptr to the x-coordinate range. </li> <li>y optional_ptr to the y-coordinate range. </li> </ul> <p>Suggestion: Use these construction helpers instead:</p> <ul> <li>boxes(U1&amp;&amp; x, U2&amp;&amp; y)</li> <li>boxes(U2&amp;&amp; y) </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-label","title":"function label","text":"<pre><code>inline Boxes &amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-label_1","title":"function label","text":"<pre><code>inline Boxes &amp;&amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-label_2","title":"function label","text":"<pre><code>inline Boxes &amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-label_3","title":"function label","text":"<pre><code>inline Boxes &amp;&amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-boxwidth","title":"function boxWidth","text":"<pre><code>inline float boxWidth() const\n</code></pre> <p>returns the width of the boxes as a float number </p> <p>Return: float - the width of the boxes </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-boxwidth_1","title":"function boxWidth","text":"<pre><code>inline Boxes &amp; boxWidth(\n    float bw\n)\n</code></pre> <p>sets the absolute width of the boxes </p> <p>Parameters: </p> <ul> <li>bw : float - the new box width </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-boxwidth_2","title":"function boxWidth","text":"<pre><code>inline Boxes &amp;&amp; boxWidth(\n    float bw\n)\n</code></pre> <p>sets the absolute width of the boxes </p> <p>Parameters: </p> <ul> <li>bw : float - the new box width </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-isrelativeboxwidth","title":"function isRelativeBoxWidth","text":"<pre><code>inline bool isRelativeBoxWidth() const\n</code></pre> <p>Return: bool - true if the plot uses a relative box width </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-relativeboxwidth","title":"function relativeBoxWidth","text":"<pre><code>inline Boxes &amp; relativeBoxWidth(\n    bool rbw =true\n)\n</code></pre> <p>sets the box width to relative or absolute </p> <p>Parameters: </p> <ul> <li>rbw : float - if true (default): uses relative box width, if false: uses absolute box widths </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-relativeboxwidth_1","title":"function relativeBoxWidth","text":"<pre><code>inline Boxes &amp;&amp; relativeBoxWidth(\n    bool rbw =true\n)\n</code></pre> <p>sets the box width to relative or absolute </p> <p>Parameters: </p> <ul> <li>rbw : float - if true (default): uses relative box width, if false: uses absolute box widths </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-fill","title":"function fill","text":"<pre><code>inline const FillStyle &amp; fill() const\n</code></pre> <p>Return: FillStyle - The fillstyle of the plot </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-fillsolid","title":"function fillSolid","text":"<pre><code>inline Boxes &amp; fillSolid(\n    float opacity =0.6,\n    bool transparent =false\n)\n</code></pre> <p>sets the box fill style to a solid fillClear </p> <p>Parameters: </p> <ul> <li>opacity : float - sets the opacity of the fill (default is 0.6) </li> <li>transparent : bool - if true: makes the fill transparent, opacity acts like alpha value; if false (default): cannot see through filled areas </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-fillsolid_1","title":"function fillSolid","text":"<pre><code>inline Boxes &amp;&amp; fillSolid(\n    float opacity =0.6,\n    bool transparent =false\n)\n</code></pre> <p>sets the box fill style to a solid fillClear </p> <p>Parameters: </p> <ul> <li>opacity : float - sets the opacity of the fill (default is 0.6) </li> <li>transparent : bool - if true: makes the fill transparent, opacity acts like alpha value; if false (default): cannot see through filled areas </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-fillclear","title":"function fillClear","text":"<pre><code>inline Boxes &amp; fillClear()\n</code></pre> <p>removes any fill-styles </p> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-fillclear_1","title":"function fillClear","text":"<pre><code>inline Boxes &amp;&amp; fillClear()\n</code></pre> <p>removes any fill-styles </p> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-fillpattern","title":"function fillPattern","text":"<pre><code>inline Boxes &amp; fillPattern(\n    int n\n)\n</code></pre> <p>uses a gnuplot fill pattern. May be useful for black and white printing. </p> <p>Parameters: </p> <ul> <li>n : int - the number of the pattern </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-fillpattern_1","title":"function fillPattern","text":"<pre><code>inline Boxes &amp;&amp; fillPattern(\n    int n\n)\n</code></pre> <p>uses a gnuplot fill pattern. May be useful for black and white printing. </p> <p>Parameters: </p> <ul> <li>n : int - the number of the pattern </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-border","title":"function border","text":"<pre><code>inline Boxes &amp; border(\n    bool b =true\n)\n</code></pre> <p>sets the border of the box </p> <p>Parameters: </p> <ul> <li>b : bool - if true (default): enables the border; if false: disables the border </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-border_1","title":"function border","text":"<pre><code>inline Boxes &amp;&amp; border(\n    bool b =true\n)\n</code></pre> <p>sets the border of the box </p> <p>Parameters: </p> <ul> <li>b : bool - if true (default): enables the border; if false: disables the border </li> </ul> <p>Return: Boxes - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-printsettings","title":"function printSettings","text":"<pre><code>inline virtual void printSettings(\n    FILE * fptr\n) const override\n</code></pre> <p>prints extra commands that are not within the gnuplot plot command </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printSettings</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the data for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printData</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p>"},{"location":"API/Classes/classplotpp_1_1_boxes/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the plot command for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printPlot</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_boxplot/","title":"plotpp::Boxplot","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#public-functions","title":"Public Functions","text":"Name Boxplot(const Tx &amp; x_scalar, optional_ptr&lt; Ty &gt; y_range) Boxplot &amp; label(const char * label) Boxplot &amp;&amp; label(const char * label) Boxplot &amp; label(std::string_view label) Boxplot &amp;&amp; label(std::string_view label) Boxplot &amp; label(std::string &amp;&amp; label) Boxplot &amp;&amp; label(std::string &amp;&amp; label) float opacity() const Boxplot &amp; opacity(float opacity) Boxplot &amp;&amp; opacity(float opacity) float boxWidth() const Boxplot &amp; boxWidth(float bw) Boxplot &amp;&amp; boxWidth(float bw) bool relativeBoxWidth() const Boxplot &amp; relativeBoxWidth(bool rbw) Boxplot &amp;&amp; relativeBoxWidth(bool rbw) virtual void printSettings(FILE * fptr) const virtual void printData(FILE * fptr) const virtual void printPlot(FILE * fptr) const"},{"location":"API/Classes/classplotpp_1_1_boxplot/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_boxplot/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;class Tx ,\nForwardRange Ty&gt;\nclass plotpp::Boxplot;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-boxplot","title":"function Boxplot","text":"<pre><code>inline Boxplot(\n    const Tx &amp; x_scalar,\n    optional_ptr&lt; Ty &gt; y_range\n)\n</code></pre> <p>Note: Boxplot needs at least 4 y-data points to work correctly If less than 4 datapoints are used the median will be added as padding. </p>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-label","title":"function label","text":"<pre><code>inline Boxplot &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-label_1","title":"function label","text":"<pre><code>inline Boxplot &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-label_2","title":"function label","text":"<pre><code>inline Boxplot &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-label_3","title":"function label","text":"<pre><code>inline Boxplot &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-label_4","title":"function label","text":"<pre><code>inline Boxplot &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-label_5","title":"function label","text":"<pre><code>inline Boxplot &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-opacity","title":"function opacity","text":"<pre><code>inline float opacity() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-opacity_1","title":"function opacity","text":"<pre><code>inline Boxplot &amp; opacity(\n    float opacity\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-opacity_2","title":"function opacity","text":"<pre><code>inline Boxplot &amp;&amp; opacity(\n    float opacity\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-boxwidth","title":"function boxWidth","text":"<pre><code>inline float boxWidth() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-boxwidth_1","title":"function boxWidth","text":"<pre><code>inline Boxplot &amp; boxWidth(\n    float bw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-boxwidth_2","title":"function boxWidth","text":"<pre><code>inline Boxplot &amp;&amp; boxWidth(\n    float bw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-relativeboxwidth","title":"function relativeBoxWidth","text":"<pre><code>inline bool relativeBoxWidth() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-relativeboxwidth_1","title":"function relativeBoxWidth","text":"<pre><code>inline Boxplot &amp; relativeBoxWidth(\n    bool rbw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-relativeboxwidth_2","title":"function relativeBoxWidth","text":"<pre><code>inline Boxplot &amp;&amp; relativeBoxWidth(\n    bool rbw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-printsettings","title":"function printSettings","text":"<pre><code>inline virtual void printSettings(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printSettings</p>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p>"},{"location":"API/Classes/classplotpp_1_1_boxplot/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_circle/","title":"plotpp::Circle","text":"<p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_circle/#public-functions","title":"Public Functions","text":"Name Circle(float x, float y, float radius, float startAngle =0.0f, float endAngle =360.0f) Circle &amp; label(const char * label) Circle &amp;&amp; label(const char * label) Circle &amp; label(std::string_view label) Circle &amp;&amp; label(std::string_view label) Circle &amp; label(std::string &amp;&amp; label) Circle &amp;&amp; label(std::string &amp;&amp; label) LineType lineType() const Circle &amp; lineType(LineType lt) Circle &amp;&amp; lineType(LineType lt) float lineWidth() const Circle &amp; lineWidth(float lw) Circle &amp;&amp; lineWidth(float lw) Color color() const Circle &amp; color(Color col) Circle &amp;&amp; color(Color col) bool isAutoColor() const Circle &amp; setAutoColor() Circle &amp;&amp; setAutoColor() const FillStyle &amp; fill() const Circle &amp; fillSolid(float opacity =1.0, bool transparent =false) Circle &amp;&amp; fillSolid(float opacity =1.0, bool transparent =false) Circle &amp; fillClear() Circle &amp;&amp; fillClear() Circle &amp; fillPattern(int n) Circle &amp;&amp; fillPattern(int n) virtual void printData(FILE * fptr) const override virtual void printPlot(FILE * fptr) const override"},{"location":"API/Classes/classplotpp_1_1_circle/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_circle/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_circle/#function-circle","title":"function Circle","text":"<pre><code>Circle(\n    float x,\n    float y,\n    float radius,\n    float startAngle =0.0f,\n    float endAngle =360.0f\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-label","title":"function label","text":"<pre><code>inline Circle &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-label_1","title":"function label","text":"<pre><code>inline Circle &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-label_2","title":"function label","text":"<pre><code>inline Circle &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-label_3","title":"function label","text":"<pre><code>inline Circle &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-label_4","title":"function label","text":"<pre><code>inline Circle &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-label_5","title":"function label","text":"<pre><code>inline Circle &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-linetype","title":"function lineType","text":"<pre><code>inline LineType lineType() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-linetype_1","title":"function lineType","text":"<pre><code>inline Circle &amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-linetype_2","title":"function lineType","text":"<pre><code>inline Circle &amp;&amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-linewidth","title":"function lineWidth","text":"<pre><code>inline float lineWidth() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-linewidth_1","title":"function lineWidth","text":"<pre><code>inline Circle &amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-linewidth_2","title":"function lineWidth","text":"<pre><code>inline Circle &amp;&amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-color_1","title":"function color","text":"<pre><code>inline Circle &amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-color_2","title":"function color","text":"<pre><code>inline Circle &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-isautocolor","title":"function isAutoColor","text":"<pre><code>inline bool isAutoColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-setautocolor","title":"function setAutoColor","text":"<pre><code>inline Circle &amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-setautocolor_1","title":"function setAutoColor","text":"<pre><code>inline Circle &amp;&amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-fill","title":"function fill","text":"<pre><code>inline const FillStyle &amp; fill() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-fillsolid","title":"function fillSolid","text":"<pre><code>inline Circle &amp; fillSolid(\n    float opacity =1.0,\n    bool transparent =false\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-fillsolid_1","title":"function fillSolid","text":"<pre><code>inline Circle &amp;&amp; fillSolid(\n    float opacity =1.0,\n    bool transparent =false\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-fillclear","title":"function fillClear","text":"<pre><code>inline Circle &amp; fillClear()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-fillclear_1","title":"function fillClear","text":"<pre><code>inline Circle &amp;&amp; fillClear()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-fillpattern","title":"function fillPattern","text":"<pre><code>inline Circle &amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-fillpattern_1","title":"function fillPattern","text":"<pre><code>inline Circle &amp;&amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-printdata","title":"function printData","text":"<pre><code>virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p>"},{"location":"API/Classes/classplotpp_1_1_circle/#function-printplot","title":"function printPlot","text":"<pre><code>virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_color/","title":"plotpp::Color","text":""},{"location":"API/Classes/classplotpp_1_1_color/#public-functions","title":"Public Functions","text":"Name constexpr Color() =default constexpr Color(uint8_t red, uint8_t green, uint8_t blue) constexpr Color(int red, int green, int blue) constexpr Color(float red, float green, float blue) constexpr Color(double red, double green, double blue) constexpr Color(uint32_t rgb) uint8_t red_ui8() const uint8_t green_ui8() const uint8_t blue_ui8() const float redf() const float greenf() const float bluef() const Color &amp; red(uint8_t red) Color &amp; green(uint8_t green) Color &amp; blue(uint8_t blue) std::int32_t to_int32() const std::string to_hex() const"},{"location":"API/Classes/classplotpp_1_1_color/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_color/#function-color","title":"function Color","text":"<pre><code>constexpr Color() =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-color_1","title":"function Color","text":"<pre><code>inline constexpr Color(\n    uint8_t red,\n    uint8_t green,\n    uint8_t blue\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-color_2","title":"function Color","text":"<pre><code>inline constexpr Color(\n    int red,\n    int green,\n    int blue\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-color_3","title":"function Color","text":"<pre><code>inline constexpr Color(\n    float red,\n    float green,\n    float blue\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-color_4","title":"function Color","text":"<pre><code>inline constexpr Color(\n    double red,\n    double green,\n    double blue\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-color_5","title":"function Color","text":"<pre><code>inline constexpr Color(\n    uint32_t rgb\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-red_ui8","title":"function red_ui8","text":"<pre><code>inline uint8_t red_ui8() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-green_ui8","title":"function green_ui8","text":"<pre><code>inline uint8_t green_ui8() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-blue_ui8","title":"function blue_ui8","text":"<pre><code>inline uint8_t blue_ui8() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-redf","title":"function redf","text":"<pre><code>inline float redf() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-greenf","title":"function greenf","text":"<pre><code>inline float greenf() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-bluef","title":"function bluef","text":"<pre><code>inline float bluef() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-red","title":"function red","text":"<pre><code>inline Color &amp; red(\n    uint8_t red\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-green","title":"function green","text":"<pre><code>inline Color &amp; green(\n    uint8_t green\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-blue","title":"function blue","text":"<pre><code>inline Color &amp; blue(\n    uint8_t blue\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-to_int32","title":"function to_int32","text":"<pre><code>inline std::int32_t to_int32() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_color/#function-to_hex","title":"function to_hex","text":"<pre><code>inline std::string to_hex() const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_figure/","title":"plotpp::Figure","text":""},{"location":"API/Classes/classplotpp_1_1_figure/#public-functions","title":"Public Functions","text":"Name Figure() =default Figure(const Figure &amp; ) =delete Figure(Figure &amp;&amp; ) =default Figure(std::string title_str) Figure(Text title, Text xlabel, Text ylabel) ~Figure() Figure &amp; title(const Text &amp; title) Figure &amp; title(Text &amp;&amp; title) Figure &amp; xLabel(const Text &amp; xlabel) Figure &amp; xLabel(Text &amp;&amp; xlabel) Figure &amp; yLabel(const Text &amp; ylabel) Figure &amp; yLabel(Text &amp;&amp; ylabel) Figure &amp; xMin(float v) Figure &amp; xMax(float v) Figure &amp; yMin(float v) Figure &amp; yMax(float v) Figure &amp; xlim(float x_min, float x_max) Figure &amp; ylim(float y_min, float y_max) Figure &amp; lim(float x_min, float x_max, float y_min, float y_max) Figure &amp; xLog(bool b =true) Figure &amp; yLog(bool b =true) Figure &amp; xLogBase(float base) Figure &amp; yLogBase(float base) Figure &amp; xReverse(bool b =true) Figure &amp; yReverse(bool b =true) Figure &amp; xAutoscale(bool b =true) Figure &amp; yAutoscale(bool b =true) Figure &amp; autoscale(bool b =true) Figure &amp; xGrid(bool b =true) Figure &amp; yGrid(bool b =true) Figure &amp; grid(bool b =true) Figure &amp; showLegend(bool b =true) FILE * get_gnuplot_pipe() void close_gnuplot_pipe() template &lt;class T &gt; Figure &amp; add(std::shared_ptr&lt; T &gt; plot) template &lt;class T &gt; Figure &amp; add(T &amp;&amp; plot) Figure &amp; add(std::shared_ptr&lt; IPlot &gt; plot) Figure &amp; xtics(std::vector&lt; std::string &gt; tic_labels) template &lt;class T &gt; Figure &amp; xtics(const T &amp; tic_labels) Figure &amp; xtics(std::vector&lt; std::string &gt; tic_labels, std::vector&lt; double &gt; values) template &lt;ForwardRange T&gt; Figure &amp; xtics(const T &amp; tic_labels, std::vector&lt; double &gt; values) Figure &amp; clear_xtics() const Figure &amp; save(std::string filename =\"\", OutputFileType filetype =OutputFileType::NONE, TerminalType terminalType =TerminalType::NONE) const Figure &amp; save(std::string filename =\"\", OutputFileType filetype =OutputFileType::NONE, TerminalType terminalType =TerminalType::NONE) Figure &amp; show(OutputFileType filetype) Figure &amp; show(TerminalType terminalType =TerminalType::NONE) const Figure &amp; plot(FILE * fptr, TerminalType terminalType =TerminalType::NONE, std::string saveAs =\"\") const Figure &amp; plot(FILE * fptr, TerminalType terminalType =TerminalType::NONE, std::string saveAs =\"\")"},{"location":"API/Classes/classplotpp_1_1_figure/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_figure/#function-figure","title":"function Figure","text":"<pre><code>Figure() =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-figure_1","title":"function Figure","text":"<pre><code>Figure(\n    const Figure &amp; \n) =delete\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-figure_2","title":"function Figure","text":"<pre><code>Figure(\n    Figure &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-figure_3","title":"function Figure","text":"<pre><code>Figure(\n    std::string title_str\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-figure_4","title":"function Figure","text":"<pre><code>Figure(\n    Text title,\n    Text xlabel,\n    Text ylabel\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-figure_5","title":"function ~Figure","text":"<pre><code>~Figure()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-title","title":"function title","text":"<pre><code>Figure &amp; title(\n    const Text &amp; title\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-title_1","title":"function title","text":"<pre><code>Figure &amp; title(\n    Text &amp;&amp; title\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xlabel","title":"function xLabel","text":"<pre><code>Figure &amp; xLabel(\n    const Text &amp; xlabel\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xlabel_1","title":"function xLabel","text":"<pre><code>Figure &amp; xLabel(\n    Text &amp;&amp; xlabel\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ylabel","title":"function yLabel","text":"<pre><code>Figure &amp; yLabel(\n    const Text &amp; ylabel\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ylabel_1","title":"function yLabel","text":"<pre><code>Figure &amp; yLabel(\n    Text &amp;&amp; ylabel\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xmin","title":"function xMin","text":"<pre><code>Figure &amp; xMin(\n    float v\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xmax","title":"function xMax","text":"<pre><code>Figure &amp; xMax(\n    float v\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ymin","title":"function yMin","text":"<pre><code>Figure &amp; yMin(\n    float v\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ymax","title":"function yMax","text":"<pre><code>Figure &amp; yMax(\n    float v\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xlim","title":"function xlim","text":"<pre><code>Figure &amp; xlim(\n    float x_min,\n    float x_max\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ylim","title":"function ylim","text":"<pre><code>Figure &amp; ylim(\n    float y_min,\n    float y_max\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-lim","title":"function lim","text":"<pre><code>Figure &amp; lim(\n    float x_min,\n    float x_max,\n    float y_min,\n    float y_max\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xlog","title":"function xLog","text":"<pre><code>Figure &amp; xLog(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ylog","title":"function yLog","text":"<pre><code>Figure &amp; yLog(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xlogbase","title":"function xLogBase","text":"<pre><code>Figure &amp; xLogBase(\n    float base\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ylogbase","title":"function yLogBase","text":"<pre><code>Figure &amp; yLogBase(\n    float base\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xreverse","title":"function xReverse","text":"<pre><code>Figure &amp; xReverse(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-yreverse","title":"function yReverse","text":"<pre><code>Figure &amp; yReverse(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xautoscale","title":"function xAutoscale","text":"<pre><code>Figure &amp; xAutoscale(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-yautoscale","title":"function yAutoscale","text":"<pre><code>Figure &amp; yAutoscale(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-autoscale","title":"function autoscale","text":"<pre><code>Figure &amp; autoscale(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xgrid","title":"function xGrid","text":"<pre><code>Figure &amp; xGrid(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-ygrid","title":"function yGrid","text":"<pre><code>Figure &amp; yGrid(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-grid","title":"function grid","text":"<pre><code>Figure &amp; grid(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-showlegend","title":"function showLegend","text":"<pre><code>Figure &amp; showLegend(\n    bool b =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-get_gnuplot_pipe","title":"function get_gnuplot_pipe","text":"<pre><code>FILE * get_gnuplot_pipe()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-close_gnuplot_pipe","title":"function close_gnuplot_pipe","text":"<pre><code>void close_gnuplot_pipe()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-add","title":"function add","text":"<pre><code>template &lt;class T &gt;\ninline Figure &amp; add(\n    std::shared_ptr&lt; T &gt; plot\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-add_1","title":"function add","text":"<pre><code>template &lt;class T &gt;\ninline Figure &amp; add(\n    T &amp;&amp; plot\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-add_2","title":"function add","text":"<pre><code>Figure &amp; add(\n    std::shared_ptr&lt; IPlot &gt; plot\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xtics","title":"function xtics","text":"<pre><code>Figure &amp; xtics(\n    std::vector&lt; std::string &gt; tic_labels\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xtics_1","title":"function xtics","text":"<pre><code>template &lt;class T &gt;\ninline Figure &amp; xtics(\n    const T &amp; tic_labels\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xtics_2","title":"function xtics","text":"<pre><code>Figure &amp; xtics(\n    std::vector&lt; std::string &gt; tic_labels,\n    std::vector&lt; double &gt; values\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-xtics_3","title":"function xtics","text":"<pre><code>template &lt;ForwardRange T&gt;\ninline Figure &amp; xtics(\n    const T &amp; tic_labels,\n    std::vector&lt; double &gt; values\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-clear_xtics","title":"function clear_xtics","text":"<pre><code>Figure &amp; clear_xtics()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-save","title":"function save","text":"<pre><code>const Figure &amp; save(\n    std::string filename =\"\",\n    OutputFileType filetype =OutputFileType::NONE,\n    TerminalType terminalType =TerminalType::NONE\n) const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-save_1","title":"function save","text":"<pre><code>inline Figure &amp; save(\n    std::string filename =\"\",\n    OutputFileType filetype =OutputFileType::NONE,\n    TerminalType terminalType =TerminalType::NONE\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-show","title":"function show","text":"<pre><code>Figure &amp; show(\n    OutputFileType filetype\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-show_1","title":"function show","text":"<pre><code>Figure &amp; show(\n    TerminalType terminalType =TerminalType::NONE\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-plot","title":"function plot","text":"<pre><code>const Figure &amp; plot(\n    FILE * fptr,\n    TerminalType terminalType =TerminalType::NONE,\n    std::string saveAs =\"\"\n) const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_figure/#function-plot_1","title":"function plot","text":"<pre><code>inline Figure &amp; plot(\n    FILE * fptr,\n    TerminalType terminalType =TerminalType::NONE,\n    std::string saveAs =\"\"\n)\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_fill_style/","title":"plotpp::FillStyle","text":""},{"location":"API/Classes/classplotpp_1_1_fill_style/#public-types","title":"Public Types","text":"Name enum class Type"},{"location":"API/Classes/classplotpp_1_1_fill_style/#public-functions","title":"Public Functions","text":"Name void clear() bool isEmpty() const void solid(float opacity =1.0, bool transparent =true) void pattern(int n) void border(bool b) Type type() const float opacity() const bool transparent() const bool pattern() const bool border() const"},{"location":"API/Classes/classplotpp_1_1_fill_style/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_fill_style/#enum-type","title":"enum Type","text":"Enumerator Value Description None Solid Pattern"},{"location":"API/Classes/classplotpp_1_1_fill_style/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-clear","title":"function clear","text":"<pre><code>inline void clear()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-isempty","title":"function isEmpty","text":"<pre><code>inline bool isEmpty() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-solid","title":"function solid","text":"<pre><code>inline void solid(\n    float opacity =1.0,\n    bool transparent =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-pattern","title":"function pattern","text":"<pre><code>inline void pattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-border","title":"function border","text":"<pre><code>inline void border(\n    bool b\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-type","title":"function type","text":"<pre><code>inline Type type() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-opacity","title":"function opacity","text":"<pre><code>inline float opacity() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-transparent","title":"function transparent","text":"<pre><code>inline bool transparent() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-pattern_1","title":"function pattern","text":"<pre><code>inline bool pattern() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_fill_style/#function-border_1","title":"function border","text":"<pre><code>inline bool border() const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/","title":"plotpp::Filledcurves","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#public-functions","title":"Public Functions","text":"Name Filledcurves(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty1 &gt; y1, optional_ptr&lt; Ty2 &gt; y2) Filledcurves(Filledcurves const &amp; ) =default Filledcurves(Filledcurves &amp;&amp; ) =default Filledcurves &amp; operator=(Filledcurves const &amp; ) =default Filledcurves &amp; operator=(Filledcurves &amp;&amp; ) =default Color color() const Filledcurves &amp; color(Color col) Filledcurves &amp;&amp; color(Color col) bool isAutoColor() const Filledcurves &amp; setAutoColor() Filledcurves &amp;&amp; setAutoColor() Filledcurves &amp; label(const char * label) Filledcurves &amp;&amp; label(const char * label) Filledcurves &amp; label(std::string_view label) Filledcurves &amp;&amp; label(std::string_view label) Filledcurves &amp; label(std::string &amp;&amp; label) Filledcurves &amp;&amp; label(std::string &amp;&amp; label) const FillStyle &amp; fill() const Filledcurves &amp; fillSolid(float opacity =0.6, bool transparent =true) Filledcurves &amp;&amp; fillSolid(float opacity =0.6, bool transparent =true) Filledcurves &amp; fillClear() Filledcurves &amp;&amp; fillClear() Filledcurves &amp; fillPattern(int n) Filledcurves &amp;&amp; fillPattern(int n) virtual void printPlot(FILE * fptr) const override virtual void printData(FILE * fptr) const override"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#public-attributes","title":"Public Attributes","text":"Name optional_ptr&lt; Tx &gt; x_ optional_ptr&lt; Ty1 &gt; y1_ optional_ptr&lt; Ty2 &gt; y2_ std::optional&lt; Color &gt; opt_color FillStyle fill_style"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;ForwardRange Tx,\nForwardRange Ty1,\nForwardRange Ty2&gt;\nclass plotpp::Filledcurves;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-filledcurves","title":"function Filledcurves","text":"<pre><code>inline Filledcurves(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty1 &gt; y1,\n    optional_ptr&lt; Ty2 &gt; y2\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-filledcurves_1","title":"function Filledcurves","text":"<pre><code>Filledcurves(\n    Filledcurves const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-filledcurves_2","title":"function Filledcurves","text":"<pre><code>Filledcurves(\n    Filledcurves &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-operator","title":"function operator=","text":"<pre><code>Filledcurves &amp; operator=(\n    Filledcurves const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-operator_1","title":"function operator=","text":"<pre><code>Filledcurves &amp; operator=(\n    Filledcurves &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-color_1","title":"function color","text":"<pre><code>inline Filledcurves &amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-color_2","title":"function color","text":"<pre><code>inline Filledcurves &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-isautocolor","title":"function isAutoColor","text":"<pre><code>inline bool isAutoColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-setautocolor","title":"function setAutoColor","text":"<pre><code>inline Filledcurves &amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-setautocolor_1","title":"function setAutoColor","text":"<pre><code>inline Filledcurves &amp;&amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-label","title":"function label","text":"<pre><code>inline Filledcurves &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-label_1","title":"function label","text":"<pre><code>inline Filledcurves &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-label_2","title":"function label","text":"<pre><code>inline Filledcurves &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-label_3","title":"function label","text":"<pre><code>inline Filledcurves &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-label_4","title":"function label","text":"<pre><code>inline Filledcurves &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-label_5","title":"function label","text":"<pre><code>inline Filledcurves &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-fill","title":"function fill","text":"<pre><code>inline const FillStyle &amp; fill() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-fillsolid","title":"function fillSolid","text":"<pre><code>inline Filledcurves &amp; fillSolid(\n    float opacity =0.6,\n    bool transparent =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-fillsolid_1","title":"function fillSolid","text":"<pre><code>inline Filledcurves &amp;&amp; fillSolid(\n    float opacity =0.6,\n    bool transparent =true\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-fillclear","title":"function fillClear","text":"<pre><code>inline Filledcurves &amp; fillClear()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-fillclear_1","title":"function fillClear","text":"<pre><code>inline Filledcurves &amp;&amp; fillClear()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-fillpattern","title":"function fillPattern","text":"<pre><code>inline Filledcurves &amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-fillpattern_1","title":"function fillPattern","text":"<pre><code>inline Filledcurves &amp;&amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_filledcurves/#variable-x_","title":"variable x_","text":"<pre><code>optional_ptr&lt; Tx &gt; x_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#variable-y1_","title":"variable y1_","text":"<pre><code>optional_ptr&lt; Ty1 &gt; y1_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#variable-y2_","title":"variable y2_","text":"<pre><code>optional_ptr&lt; Ty2 &gt; y2_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#variable-opt_color","title":"variable opt_color","text":"<pre><code>std::optional&lt; Color &gt; opt_color = std::nullopt;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_filledcurves/#variable-fill_style","title":"variable fill_style","text":"<pre><code>FillStyle fill_style;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_heatmap/","title":"plotpp::Heatmap","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#public-functions","title":"Public Functions","text":"Name Heatmap(optional_ptr&lt; T &gt; matrix, size_t rows, size_t columns, std::function&lt; double(const T &amp;, size_t, size_t)&gt; at) Heatmap &amp; label(const char * label) Heatmap &amp;&amp; label(const char * label) Heatmap &amp; label(std::string_view label) Heatmap &amp;&amp; label(std::string_view label) Heatmap &amp; label(std::string &amp;&amp; label) Heatmap &amp;&amp; label(std::string &amp;&amp; label) virtual void printPlot(FILE * fptr) const virtual void printData(FILE * fptr) const"},{"location":"API/Classes/classplotpp_1_1_heatmap/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_heatmap/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;class T &gt;\nclass plotpp::Heatmap;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-heatmap","title":"function Heatmap","text":"<pre><code>inline Heatmap(\n    optional_ptr&lt; T &gt; matrix,\n    size_t rows,\n    size_t columns,\n    std::function&lt; double(const T &amp;, size_t, size_t)&gt; at\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-label","title":"function label","text":"<pre><code>inline Heatmap &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-label_1","title":"function label","text":"<pre><code>inline Heatmap &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-label_2","title":"function label","text":"<pre><code>inline Heatmap &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-label_3","title":"function label","text":"<pre><code>inline Heatmap &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-label_4","title":"function label","text":"<pre><code>inline Heatmap &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-label_5","title":"function label","text":"<pre><code>inline Heatmap &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_heatmap/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_i_plot/","title":"plotpp::IPlot","text":"<p>Inherited by plotpp::Arrows&lt; Tx1, Ty1, Tx2, Ty2 &gt;, plotpp::Boxes&lt; Tx, Ty &gt;, plotpp::Boxplot&lt; Tx, Ty &gt;, plotpp::Circle, plotpp::Filledcurves&lt; Tx, Ty1, Ty2 &gt;, plotpp::Heatmap&lt; T &gt;, plotpp::Impulses&lt; Tx, Ty &gt;, plotpp::Line&lt; Tx, Ty &gt;, plotpp::Piechart&lt; Tnames &gt;, plotpp::Points&lt; Tx, Ty &gt;, plotpp::Steps&lt; Tx, Ty &gt;, plotpp::XError&lt; Tx, Ty, Txerr &gt;, plotpp::XYError&lt; Tx, Ty, Txerr, Tyerr &gt;, plotpp::YError&lt; Tx, Ty, Tyerr &gt;, plotpp::YErrorLine&lt; Tx, Ty, Terr &gt;</p>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#public-functions","title":"Public Functions","text":"Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printPlot(std::ostream &amp; stream) const =delete virtual void printData(std::ostream &amp; stream) const =delete virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printPlot(FILE * fptr) const =0 virtual void printData(FILE * fptr) const =0 virtual void printSettings(FILE * fptr) const const PlotTitle &amp; label() const PlotTitle &amp; label() IPlot &amp; label(const PlotTitle &amp; label) IPlot &amp;&amp; label(const PlotTitle &amp; label) IPlot &amp; label(PlotTitle &amp;&amp; label) IPlot &amp;&amp; label(PlotTitle &amp;&amp; label)"},{"location":"API/Classes/classplotpp_1_1_i_plot/#protected-functions","title":"Protected Functions","text":"Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const"},{"location":"API/Classes/classplotpp_1_1_i_plot/#friends","title":"Friends","text":"Name class Figure"},{"location":"API/Classes/classplotpp_1_1_i_plot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-iplot","title":"function IPlot","text":"<pre><code>IPlot() =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-iplot_1","title":"function IPlot","text":"<pre><code>inline IPlot(\n    std::string label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-iplot_2","title":"function ~IPlot","text":"<pre><code>inline virtual ~IPlot()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-printplot","title":"function printPlot","text":"<pre><code>virtual void printPlot(\n    std::ostream &amp; stream\n) const =delete\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-printdata","title":"function printData","text":"<pre><code>virtual void printData(\n    std::ostream &amp; stream\n) const =delete\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-printsettings","title":"function printSettings","text":"<pre><code>virtual void printSettings(\n    std::ostream &amp; stream\n) const =delete\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-printplot_1","title":"function printPlot","text":"<pre><code>virtual void printPlot(\n    FILE * fptr\n) const =0\n</code></pre> <p>Reimplemented by: plotpp::Arrows::printPlot, plotpp::Boxes::printPlot, plotpp::Boxplot::printPlot, plotpp::Circle::printPlot, plotpp::Filledcurves::printPlot, plotpp::Heatmap::printPlot, plotpp::Impulses::printPlot, plotpp::Line::printPlot, plotpp::Piechart::printPlot, plotpp::Points::printPlot, plotpp::Steps::printPlot, plotpp::XError::printPlot, plotpp::XYError::printPlot, plotpp::YError::printPlot, plotpp::YErrorLine::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-printdata_1","title":"function printData","text":"<pre><code>virtual void printData(\n    FILE * fptr\n) const =0\n</code></pre> <p>Reimplemented by: plotpp::Arrows::printData, plotpp::Boxes::printData, plotpp::Boxplot::printData, plotpp::Circle::printData, plotpp::Filledcurves::printData, plotpp::Heatmap::printData, plotpp::Impulses::printData, plotpp::Line::printData, plotpp::Piechart::printData, plotpp::Points::printData, plotpp::Steps::printData, plotpp::XError::printData, plotpp::XYError::printData, plotpp::YError::printData, plotpp::YErrorLine::printData</p>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-printsettings_1","title":"function printSettings","text":"<pre><code>inline virtual void printSettings(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplemented by: plotpp::Boxes::printSettings, plotpp::Boxplot::printSettings</p>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-label","title":"function label","text":"<pre><code>inline const PlotTitle &amp; label() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-label_1","title":"function label","text":"<pre><code>inline PlotTitle &amp; label()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-label_2","title":"function label","text":"<pre><code>inline IPlot &amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-label_3","title":"function label","text":"<pre><code>inline IPlot &amp;&amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-label_4","title":"function label","text":"<pre><code>inline IPlot &amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-label_5","title":"function label","text":"<pre><code>inline IPlot &amp;&amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-uid","title":"function uid","text":"<pre><code>inline virtual IPlot &amp; uid(\n    size_t &amp; uid_io\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#function-uid_1","title":"function uid","text":"<pre><code>inline size_t uid() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_i_plot/#friends_1","title":"Friends","text":""},{"location":"API/Classes/classplotpp_1_1_i_plot/#friend-figure","title":"friend Figure","text":"<pre><code>friend class Figure(\n    Figure \n);\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_impulses/","title":"plotpp::Impulses","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_impulses/#public-functions","title":"Public Functions","text":"Name Impulses(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y) Impulses(Impulses const &amp; ) =default Impulses(Impulses &amp;&amp; ) =default Impulses &amp; operator=(Impulses const &amp; ) =default Impulses &amp; operator=(Impulses &amp;&amp; ) =default LineType lineType() const Impulses &amp; lineType(LineType lt) Impulses &amp;&amp; lineType(LineType lt) float lineWidth() const Impulses &amp; lineWidth(float lw) Impulses &amp;&amp; lineWidth(float lw) Color color() const Impulses &amp; color(Color col) Impulses &amp;&amp; color(Color col) bool isAutoColor() const Impulses &amp; setAutoColor() Impulses &amp;&amp; setAutoColor() virtual void printPlot(FILE * fptr) const override virtual void printData(FILE * fptr) const override Impulses &amp; label(const char * label) Impulses &amp;&amp; label(const char * label) Impulses &amp; label(std::string_view label) Impulses &amp;&amp; label(std::string_view label) Impulses &amp; label(std::string &amp;&amp; label) Impulses &amp;&amp; label(std::string &amp;&amp; label)"},{"location":"API/Classes/classplotpp_1_1_impulses/#public-attributes","title":"Public Attributes","text":"Name optional_ptr&lt; Tx &gt; x_ optional_ptr&lt; Ty &gt; y_ std::optional&lt; Color &gt; opt_color LineType line_type float line_width"},{"location":"API/Classes/classplotpp_1_1_impulses/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_impulses/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;ForwardRange Tx,\nForwardRange Ty&gt;\nclass plotpp::Impulses;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_impulses/#function-impulses","title":"function Impulses","text":"<pre><code>inline Impulses(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-impulses_1","title":"function Impulses","text":"<pre><code>Impulses(\n    Impulses const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-impulses_2","title":"function Impulses","text":"<pre><code>Impulses(\n    Impulses &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-operator","title":"function operator=","text":"<pre><code>Impulses &amp; operator=(\n    Impulses const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-operator_1","title":"function operator=","text":"<pre><code>Impulses &amp; operator=(\n    Impulses &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-linetype","title":"function lineType","text":"<pre><code>inline LineType lineType() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-linetype_1","title":"function lineType","text":"<pre><code>inline Impulses &amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-linetype_2","title":"function lineType","text":"<pre><code>inline Impulses &amp;&amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-linewidth","title":"function lineWidth","text":"<pre><code>inline float lineWidth() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-linewidth_1","title":"function lineWidth","text":"<pre><code>inline Impulses &amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-linewidth_2","title":"function lineWidth","text":"<pre><code>inline Impulses &amp;&amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-color_1","title":"function color","text":"<pre><code>inline Impulses &amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-color_2","title":"function color","text":"<pre><code>inline Impulses &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-isautocolor","title":"function isAutoColor","text":"<pre><code>inline bool isAutoColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-setautocolor","title":"function setAutoColor","text":"<pre><code>inline Impulses &amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-setautocolor_1","title":"function setAutoColor","text":"<pre><code>inline Impulses &amp;&amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-label","title":"function label","text":"<pre><code>inline Impulses &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-label_1","title":"function label","text":"<pre><code>inline Impulses &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-label_2","title":"function label","text":"<pre><code>inline Impulses &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-label_3","title":"function label","text":"<pre><code>inline Impulses &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-label_4","title":"function label","text":"<pre><code>inline Impulses &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#function-label_5","title":"function label","text":"<pre><code>inline Impulses &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_impulses/#variable-x_","title":"variable x_","text":"<pre><code>optional_ptr&lt; Tx &gt; x_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#variable-y_","title":"variable y_","text":"<pre><code>optional_ptr&lt; Ty &gt; y_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#variable-opt_color","title":"variable opt_color","text":"<pre><code>std::optional&lt; Color &gt; opt_color = std::nullopt;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#variable-line_type","title":"variable line_type","text":"<pre><code>LineType line_type = LineType::solid;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_impulses/#variable-line_width","title":"variable line_width","text":"<pre><code>float line_width = 1.5;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_line/","title":"plotpp::Line","text":"<p>Represents a line plot from x- and y-coordiantes.  More...</p> <p><code>#include &lt;Line.hpp&gt;</code></p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_line/#public-functions","title":"Public Functions","text":"Name Line(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y)Constructs a Line with optional x and y coordinate ranges. Line(Line const &amp; ) =defaultDefault copy constructor. Line(Line &amp;&amp; ) =defaultDefault move constructor. Line &amp; operator=(Line const &amp; ) =defaultDefault copy assignment. Line &amp; operator=(Line &amp;&amp; ) =defaultDefault move assignment. LineType lineType() constGets the line type. Line &amp; lineType(LineType lt)Sets the line type. Line &amp;&amp; lineType(LineType lt)Sets the line type. float lineWidth() constGets the line width. Line &amp; lineWidth(float lw)Sets the line width. Line &amp;&amp; lineWidth(float lw)Sets the line width. Color lineColor() constGets the line color. Line &amp; lineColor(Color col)Sets the line color. Line &amp;&amp; lineColor(Color col)Sets the line color. Line &amp; lineColor(float r, float g, float b)Sets the line color. Line &amp;&amp; lineColor(float r, float g, float b)Sets the line color. Color fillColor() constGets the line color. Line &amp; fillColor(Color col)Sets the fill color. Line &amp;&amp; fillColor(Color col)Sets the fill color. Line &amp; color(Color col)Sets the line and fill color. Line &amp;&amp; color(Color col)Sets the line and fill color. Line &amp; autoLineColor()Enables automatic line coloring. Line &amp;&amp; autoLineColor()Enables automatic line coloring. Line &amp; autoFillColor()Enables automatic fill coloring. Line &amp;&amp; autoFillColor()Enables automatic fill coloring. Line &amp; autoColor()Enables automatic line and fill coloring. Line &amp;&amp; autoColor()Enables automatic line and fill coloring. Line &amp; fill(float opacity =0.3)Sets the opacity of the fill color. Line &amp;&amp; fill(float opacity =0.3)Sets the opacity of the fill color. Line &amp; fillPattern(int n)Sets the fill pattern. Line &amp;&amp; fillPattern(int n)Sets the fill pattern. Line &amp; noFill()Disables the curve fill. Line &amp;&amp; noFill()Disables the curve fill. bool isFilled() constTells whether or not the fill is enabled. Line &amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. Line &amp;&amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. Line &amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. Line &amp;&amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. Tx * x()Gets the x-values. const Tx * x() constGets the x-values. Ty * y()Gets the y-values. const Ty * y() constGets the y-values. virtual void printPlot(FILE * fptr) const overrideprints the plot command for gnuplot virtual void printData(FILE * fptr) const overrideprints the data for gnuplot"},{"location":"API/Classes/classplotpp_1_1_line/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_line/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;std::ranges::forward_range Tx,\nstd::ranges::forward_range Ty&gt;\nclass plotpp::Line;\n</code></pre> <p>Represents a line plot from x- and y-coordiantes. </p> <p>Template Parameters: </p> <ul> <li>Tx Type for x-coordinate range, must satisfy std::ranges::forward_range (aka. have forward <code>begin()</code> and <code>end()</code> iterators) </li> <li>Ty Type for y-coordinate range, must satisfy std::ranges::forward_range () </li> </ul> <p>The Line class holds information about how to draw a line plot in a figure. It supports various customizations such as line type, color, and fill styles.</p>"},{"location":"API/Classes/classplotpp_1_1_line/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_line/#function-line","title":"function Line","text":"<pre><code>inline Line(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y\n)\n</code></pre> <p>Constructs a Line with optional x and y coordinate ranges. </p> <p>Parameters: </p> <ul> <li>x : optional_ptr - The x-coordinate range. </li> <li>y : optional_ptr - The y-coordinate range. </li> </ul> <p>Suggestion: Use these construction helpers instead:</p> <ul> <li>line(Ux&amp;&amp; x, Uy&amp;&amp; y)</li> <li>line(Uy&amp;&amp; y)</li> </ul>"},{"location":"API/Classes/classplotpp_1_1_line/#function-line_1","title":"function Line","text":"<pre><code>Line(\n    Line const &amp; \n) =default\n</code></pre> <p>Default copy constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-line_2","title":"function Line","text":"<pre><code>Line(\n    Line &amp;&amp; \n) =default\n</code></pre> <p>Default move constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-operator","title":"function operator=","text":"<pre><code>Line &amp; operator=(\n    Line const &amp; \n) =default\n</code></pre> <p>Default copy assignment. </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-operator_1","title":"function operator=","text":"<pre><code>Line &amp; operator=(\n    Line &amp;&amp; \n) =default\n</code></pre> <p>Default move assignment. </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linetype","title":"function lineType","text":"<pre><code>inline LineType lineType() const\n</code></pre> <p>Gets the line type. </p> <p>Return: LineType - The current LineType </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linetype_1","title":"function lineType","text":"<pre><code>inline Line &amp; lineType(\n    LineType lt\n)\n</code></pre> <p>Sets the line type. </p> <p>Parameters: </p> <ul> <li>lt : LineType - The new line type </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linetype_2","title":"function lineType","text":"<pre><code>inline Line &amp;&amp; lineType(\n    LineType lt\n)\n</code></pre> <p>Sets the line type. </p> <p>Parameters: </p> <ul> <li>lt : float - The new line type </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linewidth","title":"function lineWidth","text":"<pre><code>inline float lineWidth() const\n</code></pre> <p>Gets the line width. </p> <p>Return: float: The current line width </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linewidth_1","title":"function lineWidth","text":"<pre><code>inline Line &amp; lineWidth(\n    float lw\n)\n</code></pre> <p>Sets the line width. </p> <p>Parameters: </p> <ul> <li>lw : float - The new line width </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linewidth_2","title":"function lineWidth","text":"<pre><code>inline Line &amp;&amp; lineWidth(\n    float lw\n)\n</code></pre> <p>Sets the line width. </p> <p>Parameters: </p> <ul> <li>lw : float - The new line width </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linecolor","title":"function lineColor","text":"<pre><code>inline Color lineColor() const\n</code></pre> <p>Gets the line color. </p> <p>Return: Color - the current line color </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linecolor_1","title":"function lineColor","text":"<pre><code>inline Line &amp; lineColor(\n    Color col\n)\n</code></pre> <p>Sets the line color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new line color </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linecolor_2","title":"function lineColor","text":"<pre><code>inline Line &amp;&amp; lineColor(\n    Color col\n)\n</code></pre> <p>Sets the line color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new line color </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linecolor_3","title":"function lineColor","text":"<pre><code>inline Line &amp; lineColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre> <p>Sets the line color. </p> <p>Parameters: </p> <ul> <li>rgb : float - The new line color in rgb-values in the range [0, 1] </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-linecolor_4","title":"function lineColor","text":"<pre><code>inline Line &amp;&amp; lineColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre> <p>Sets the line color. </p> <p>Parameters: </p> <ul> <li>rgb : float - The new line color in rgb-values in the range [0, 1] </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-fillcolor","title":"function fillColor","text":"<pre><code>inline Color fillColor() const\n</code></pre> <p>Gets the line color. </p> <p>Return: Color - the current fill color </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-fillcolor_1","title":"function fillColor","text":"<pre><code>inline Line &amp; fillColor(\n    Color col\n)\n</code></pre> <p>Sets the fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-fillcolor_2","title":"function fillColor","text":"<pre><code>inline Line &amp;&amp; fillColor(\n    Color col\n)\n</code></pre> <p>Sets the fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-color","title":"function color","text":"<pre><code>inline Line &amp; color(\n    Color col\n)\n</code></pre> <p>Sets the line and fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new line and fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-color_1","title":"function color","text":"<pre><code>inline Line &amp;&amp; color(\n    Color col\n)\n</code></pre> <p>Sets the line and fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new line and fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-autolinecolor","title":"function autoLineColor","text":"<pre><code>inline Line &amp; autoLineColor()\n</code></pre> <p>Enables automatic line coloring. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-autolinecolor_1","title":"function autoLineColor","text":"<pre><code>inline Line &amp;&amp; autoLineColor()\n</code></pre> <p>Enables automatic line coloring. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-autofillcolor","title":"function autoFillColor","text":"<pre><code>inline Line &amp; autoFillColor()\n</code></pre> <p>Enables automatic fill coloring. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-autofillcolor_1","title":"function autoFillColor","text":"<pre><code>inline Line &amp;&amp; autoFillColor()\n</code></pre> <p>Enables automatic fill coloring. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-autocolor","title":"function autoColor","text":"<pre><code>inline Line &amp; autoColor()\n</code></pre> <p>Enables automatic line and fill coloring. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-autocolor_1","title":"function autoColor","text":"<pre><code>inline Line &amp;&amp; autoColor()\n</code></pre> <p>Enables automatic line and fill coloring. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-fill","title":"function fill","text":"<pre><code>inline Line &amp; fill(\n    float opacity =0.3\n)\n</code></pre> <p>Sets the opacity of the fill color. </p> <p>Parameters: </p> <ul> <li>rgb : float - the new opacity in a range of [0, 1] </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-fill_1","title":"function fill","text":"<pre><code>inline Line &amp;&amp; fill(\n    float opacity =0.3\n)\n</code></pre> <p>Sets the opacity of the fill color. </p> <p>Parameters: </p> <ul> <li>rgb : float - the new opacity in a range of [0, 1] </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-fillpattern","title":"function fillPattern","text":"<pre><code>inline Line &amp; fillPattern(\n    int n\n)\n</code></pre> <p>Sets the fill pattern. </p> <p>Parameters: </p> <ul> <li>n : int - Select one of Gnuplots fill patterns. May be benefitial for printing figures on paper. </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-fillpattern_1","title":"function fillPattern","text":"<pre><code>inline Line &amp;&amp; fillPattern(\n    int n\n)\n</code></pre> <p>Sets the fill pattern. </p> <p>Parameters: </p> <ul> <li>n : int - Select one of Gnuplots fill patterns. May be benefitial for printing figures on paper. </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-nofill","title":"function noFill","text":"<pre><code>inline Line &amp; noFill()\n</code></pre> <p>Disables the curve fill. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-nofill_1","title":"function noFill","text":"<pre><code>inline Line &amp;&amp; noFill()\n</code></pre> <p>Disables the curve fill. </p> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-isfilled","title":"function isFilled","text":"<pre><code>inline bool isFilled() const\n</code></pre> <p>Tells whether or not the fill is enabled. </p> <p>Return: bool - Returns <code>true</code> if the fill is enabled and <code>false</code> otherwise </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-label","title":"function label","text":"<pre><code>inline Line &amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-label_1","title":"function label","text":"<pre><code>inline Line &amp;&amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-label_2","title":"function label","text":"<pre><code>inline Line &amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-label_3","title":"function label","text":"<pre><code>inline Line &amp;&amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Line - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-x","title":"function x","text":"<pre><code>inline Tx * x()\n</code></pre> <p>Gets the x-values. </p> <p>Return: Tx - A pointer to the provided x-values of the plot. May be a <code>nullptr</code> if non were provided. </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-x_1","title":"function x","text":"<pre><code>inline const Tx * x() const\n</code></pre> <p>Gets the x-values. </p> <p>Return: Tx - A pointer to the provided x-values of the plot. May be a <code>nullptr</code> if non were provided. </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-y","title":"function y","text":"<pre><code>inline Ty * y()\n</code></pre> <p>Gets the y-values. </p> <p>Return: Ty - A pointer to the provided y-values of the plot </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-y_1","title":"function y","text":"<pre><code>inline const Ty * y() const\n</code></pre> <p>Gets the y-values. </p> <p>Return: Ty - A pointer to the provided y-values of the plot </p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the plot command for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printPlot</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p>"},{"location":"API/Classes/classplotpp_1_1_line/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the data for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printData</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/","title":"plotpp::Multiplot","text":""},{"location":"API/Classes/classplotpp_1_1_multiplot/#public-types","title":"Public Types","text":"Name using std::vector&lt; Figure &gt;::iterator iterator using std::vector&lt; Figure &gt;::const_iterator const_iterator"},{"location":"API/Classes/classplotpp_1_1_multiplot/#public-functions","title":"Public Functions","text":"Name void close() Multiplot() =defaultdefault constructor Multiplot(Text title =\"\")construct with title Multiplot(size_t rows, size_t columns, Text title =\"\")construct a multiplot Multiplot(Multiplot &amp;&amp; ) =defaultmove constructor Multiplot &amp; operator=(Multiplot &amp;&amp; ) =defaultmove assignment Figure &amp; at(size_t row, size_t col)Access a figure in the multiplot at a specific row and column index. const Figure &amp; at(size_t row, size_t col) constAccess a figure in the multiplot at a specific row and column index. Multiplot &amp; xLabel(const Text &amp; xlabel)sets the label of the x-axis for all sub-figures Multiplot &amp; yLabel(const Text &amp; ylabel)sets the label of the y-axis for all sub-figures Multiplot &amp; xMin(float v)sets the minimum of the x-axis of all sub-figures Multiplot &amp; xMax(float v)sets the maximum of the x-axis of all sub-figures Multiplot &amp; yMin(float v)sets the minimum of the y-axis of all sub-figures Multiplot &amp; yMax(float v)sets the maximum of the y-axis of all sub-figures Multiplot &amp; xlim(float x_min, float x_max)sets the minumum and the maximum of the x-axis of all sub-figures Multiplot &amp; ylim(float y_min, float y_max)sets the minumum and the maximum of the y-axis of all sub-figures Multiplot &amp; lim(float x_min, float x_max, float y_min, float y_max)sets the minumum and the maximum of the x-axis and the y-axis of all sub-figures Multiplot &amp; xLog(bool b =true)enables or disables log scaling for the x-axis of all sub-figures Multiplot &amp; yLog(bool b =true)enables or disables log scaling for the y-axis of all sub-figures Multiplot &amp; xLogBase(float base)sets the logarithmic base for the x-axis of all sub-figures Multiplot &amp; yLogBase(float base)sets the logarithmic base for the y-axis of all sub-figures Multiplot &amp; xReverse(bool b =true)enables or disables the reversal of the x-axis of all sub-figures Multiplot &amp; yReverse(bool b =true)enables or disables the reversal of the y-axis of all sub-figures Multiplot &amp; xAutoscale(bool b =true)enables or disables autoscaling of the x-axis for all sub-figures Multiplot &amp; yAutoscale(bool b =true)enables or disables autoscaling of the y-axis for all sub-figures Multiplot &amp; autoscale(bool b =true)enables or disables autoscaling of both axis for all sub-figures Multiplot &amp; showLegend(bool b =true)enables or disables the legend of all sub-figures Multiplot &amp; xGrid(bool b =true)Sets the x-axis grid on all sub-figures. Multiplot &amp; yGrid(bool b =true)Sets the y-axis grid on all sub-figures. Multiplot &amp; grid(bool b =true)Sets the grid on all sub-figures. iterator begin() const_iterator begin() const const_iterator cbegin() const iterator end() const_iterator end() const const_iterator cend() const size_t size() const size_t rows() const size_t columns() const Multiplot &amp; resize(size_t rows, size_t columns)resize the dimensions, number of rows and columns const Multiplot &amp; save(std::string filename =\"\", OutputFileType filetype =OutputFileType::NONE, TerminalType terminalType =TerminalType::NONE) constSaves a figure to a file like: .png, .svg, .pdf, ... etc. Multiplot &amp; save(std::string filename =\"\", OutputFileType filetype =OutputFileType::NONE, TerminalType terminalType =TerminalType::NONE) Multiplot &amp; show(TerminalType terminalType =TerminalType::NONE)Plots or re-plots the figure in a window. Multiplot &amp; show(OutputFileType filetype)Plots or re-plots the figure in a window. const Multiplot &amp; plot(FILE * fptr, TerminalType terminalType =TerminalType::NONE, std::string saveAs =\"\") constPlots the Multiplot to the provided file stream. Multiplot &amp; plot(FILE * fptr, TerminalType terminalType =TerminalType::NONE, std::string saveAs =\"\")"},{"location":"API/Classes/classplotpp_1_1_multiplot/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_multiplot/#using-iterator","title":"using iterator","text":"<pre><code>using plotpp::Multiplot::iterator =  std::vector&lt;Figure&gt;::iterator;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#using-const_iterator","title":"using const_iterator","text":"<pre><code>using plotpp::Multiplot::const_iterator =  std::vector&lt;Figure&gt;::const_iterator;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-close","title":"function close","text":"<pre><code>void close()\n</code></pre> <p>closes this figure. following calls to show() will thus create a new window. closes the pipe stream to the curren figure / gnuplot scession; </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-multiplot","title":"function Multiplot","text":"<pre><code>Multiplot() =default\n</code></pre> <p>default constructor </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-multiplot_1","title":"function Multiplot","text":"<pre><code>Multiplot(\n    Text title =\"\"\n)\n</code></pre> <p>construct with title </p> <p>Parameters: </p> <ul> <li>title : Text - The title of the multiplot </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-multiplot_2","title":"function Multiplot","text":"<pre><code>Multiplot(\n    size_t rows,\n    size_t columns,\n    Text title =\"\"\n)\n</code></pre> <p>construct a multiplot </p> <p>Parameters: </p> <ul> <li>rows : size_t - The number of rows of figures </li> <li>columns : size_t - The number of columns of figures </li> <li>title : Text - The title of the multiplot </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-multiplot_3","title":"function Multiplot","text":"<pre><code>Multiplot(\n    Multiplot &amp;&amp; \n) =default\n</code></pre> <p>move constructor </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-operator","title":"function operator=","text":"<pre><code>Multiplot &amp; operator=(\n    Multiplot &amp;&amp; \n) =default\n</code></pre> <p>move assignment </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-at","title":"function at","text":"<pre><code>Figure &amp; at(\n    size_t row,\n    size_t col\n)\n</code></pre> <p>Access a figure in the multiplot at a specific row and column index. </p> <p>Parameters: </p> <ul> <li>row : size_t - The row index (starts at 0) </li> <li>col : size_t - The column index (starts at 0) </li> </ul> <p>Return: Figure&amp; - A reference to the figure at the [row, col] position </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-at_1","title":"function at","text":"<pre><code>const Figure &amp; at(\n    size_t row,\n    size_t col\n) const\n</code></pre> <p>Access a figure in the multiplot at a specific row and column index. </p> <p>Parameters: </p> <ul> <li>row : size_t - The row index (starts at 0) </li> <li>col : size_t - The column index (starts at 0) </li> </ul> <p>Return: Figure&amp; - A reference to the figure at the [row, col] position </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xlabel","title":"function xLabel","text":"<pre><code>Multiplot &amp; xLabel(\n    const Text &amp; xlabel\n)\n</code></pre> <p>sets the label of the x-axis for all sub-figures </p> <p>Parameters: </p> <ul> <li>xlabel : Text - the new formated text </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-ylabel","title":"function yLabel","text":"<pre><code>Multiplot &amp; yLabel(\n    const Text &amp; ylabel\n)\n</code></pre> <p>sets the label of the y-axis for all sub-figures </p> <p>Parameters: </p> <ul> <li>xlabel : Text - the new formated text </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xmin","title":"function xMin","text":"<pre><code>Multiplot &amp; xMin(\n    float v\n)\n</code></pre> <p>sets the minimum of the x-axis of all sub-figures </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xmax","title":"function xMax","text":"<pre><code>Multiplot &amp; xMax(\n    float v\n)\n</code></pre> <p>sets the maximum of the x-axis of all sub-figures </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-ymin","title":"function yMin","text":"<pre><code>Multiplot &amp; yMin(\n    float v\n)\n</code></pre> <p>sets the minimum of the y-axis of all sub-figures </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-ymax","title":"function yMax","text":"<pre><code>Multiplot &amp; yMax(\n    float v\n)\n</code></pre> <p>sets the maximum of the y-axis of all sub-figures </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xlim","title":"function xlim","text":"<pre><code>Multiplot &amp; xlim(\n    float x_min,\n    float x_max\n)\n</code></pre> <p>sets the minumum and the maximum of the x-axis of all sub-figures </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-ylim","title":"function ylim","text":"<pre><code>Multiplot &amp; ylim(\n    float y_min,\n    float y_max\n)\n</code></pre> <p>sets the minumum and the maximum of the y-axis of all sub-figures </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-lim","title":"function lim","text":"<pre><code>Multiplot &amp; lim(\n    float x_min,\n    float x_max,\n    float y_min,\n    float y_max\n)\n</code></pre> <p>sets the minumum and the maximum of the x-axis and the y-axis of all sub-figures </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xlog","title":"function xLog","text":"<pre><code>Multiplot &amp; xLog(\n    bool b =true\n)\n</code></pre> <p>enables or disables log scaling for the x-axis of all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> enables logarithmic scaling of the x-axis and disables it otherwise </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-ylog","title":"function yLog","text":"<pre><code>Multiplot &amp; yLog(\n    bool b =true\n)\n</code></pre> <p>enables or disables log scaling for the y-axis of all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> enables logarithmic scaling of the y-axis and disables it otherwise </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xlogbase","title":"function xLogBase","text":"<pre><code>Multiplot &amp; xLogBase(\n    float base\n)\n</code></pre> <p>sets the logarithmic base for the x-axis of all sub-figures </p> <p>Parameters: </p> <ul> <li>base : float - the new base of the logarithm for axis scaling </li> </ul> <p>Return: Multiplot - reference to self </p> <p>Note: this function also activate logarithmic scaling like xLog(bool b) would</p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-ylogbase","title":"function yLogBase","text":"<pre><code>Multiplot &amp; yLogBase(\n    float base\n)\n</code></pre> <p>sets the logarithmic base for the y-axis of all sub-figures </p> <p>Parameters: </p> <ul> <li>base : float - the new base of the logarithm for axis scaling </li> </ul> <p>Return: Multiplot - reference to self </p> <p>Note: this function also activate logarithmic scaling like yLog(bool b) would</p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xreverse","title":"function xReverse","text":"<pre><code>Multiplot &amp; xReverse(\n    bool b =true\n)\n</code></pre> <p>enables or disables the reversal of the x-axis of all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) reverses the direction of the x-axis </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-yreverse","title":"function yReverse","text":"<pre><code>Multiplot &amp; yReverse(\n    bool b =true\n)\n</code></pre> <p>enables or disables the reversal of the y-axis of all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) reverses the direction of the y-axis </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xautoscale","title":"function xAutoscale","text":"<pre><code>Multiplot &amp; xAutoscale(\n    bool b =true\n)\n</code></pre> <p>enables or disables autoscaling of the x-axis for all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) enables autoscaling of the x-axis </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-yautoscale","title":"function yAutoscale","text":"<pre><code>Multiplot &amp; yAutoscale(\n    bool b =true\n)\n</code></pre> <p>enables or disables autoscaling of the y-axis for all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) enables autoscaling of the y-axis </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-autoscale","title":"function autoscale","text":"<pre><code>Multiplot &amp; autoscale(\n    bool b =true\n)\n</code></pre> <p>enables or disables autoscaling of both axis for all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) enables autoscaling of both axis </li> </ul> <p>Return: Multiplot - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-showlegend","title":"function showLegend","text":"<pre><code>Multiplot &amp; showLegend(\n    bool b =true\n)\n</code></pre> <p>enables or disables the legend of all sub-figures </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) enables the legend </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-xgrid","title":"function xGrid","text":"<pre><code>Multiplot &amp; xGrid(\n    bool b =true\n)\n</code></pre> <p>Sets the x-axis grid on all sub-figures. </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) enables the grid else disables the grid </li> </ul> <p>Return: Multiplot&amp; - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-ygrid","title":"function yGrid","text":"<pre><code>Multiplot &amp; yGrid(\n    bool b =true\n)\n</code></pre> <p>Sets the y-axis grid on all sub-figures. </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) enables the grid else disables the grid </li> </ul> <p>Return: Multiplot&amp; - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-grid","title":"function grid","text":"<pre><code>Multiplot &amp; grid(\n    bool b =true\n)\n</code></pre> <p>Sets the grid on all sub-figures. </p> <p>Parameters: </p> <ul> <li>b : bool - if <code>true</code> (default) enables the grid else disables the grid </li> </ul> <p>Return: Multiplot&amp; - reference to self </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-begin","title":"function begin","text":"<pre><code>iterator begin()\n</code></pre> <p>Return: the start iterator to iterate over the figures (Figure) contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-begin_1","title":"function begin","text":"<pre><code>const_iterator begin() const\n</code></pre> <p>Return: the start iterator to iterate over the figures (Figure) contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-cbegin","title":"function cbegin","text":"<pre><code>const_iterator cbegin() const\n</code></pre> <p>Return: the start iterator to iterate over the figures (Figure) contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-end","title":"function end","text":"<pre><code>iterator end()\n</code></pre> <p>Return: the end iterator to iterate over the figures (Figure) contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-end_1","title":"function end","text":"<pre><code>const_iterator end() const\n</code></pre> <p>Return: the end iterator to iterate over the figures (Figure) contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-cend","title":"function cend","text":"<pre><code>const_iterator cend() const\n</code></pre> <p>Return: the end iterator to iterate over the figures (Figure) contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-size","title":"function size","text":"<pre><code>size_t size() const\n</code></pre> <p>Return: the number of figures contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-rows","title":"function rows","text":"<pre><code>size_t rows() const\n</code></pre> <p>Return: the number of rows contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-columns","title":"function columns","text":"<pre><code>size_t columns() const\n</code></pre> <p>Return: the number of columns contained in the multiplot </p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-resize","title":"function resize","text":"<pre><code>Multiplot &amp; resize(\n    size_t rows,\n    size_t columns\n)\n</code></pre> <p>resize the dimensions, number of rows and columns </p> <p>Parameters: </p> <ul> <li>rows : size_t - the new number of rows </li> <li>columns : size_t the new number of columns </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-save","title":"function save","text":"<pre><code>const Multiplot &amp; save(\n    std::string filename =\"\",\n    OutputFileType filetype =OutputFileType::NONE,\n    TerminalType terminalType =TerminalType::NONE\n) const\n</code></pre> <p>Saves a figure to a file like: .png, .svg, .pdf, ... etc. </p> <p>Parameters: </p> <ul> <li>filename : std::string - The filename as which the plot should be stored in. If the file type is provided in the name (e.g.: image file \".png\", vector graphics \".svg\", gnuplot script \"*.gp\") the <code>filetype</code> and <code>TerminalType</code> will be automatically deduced. </li> <li>filetype : OutputFileType - The output file type like : .png, .svg, .pdf. If set to <code>OutputFileType::NONE</code> (default) it is derived from the provided filename ending. </li> <li>terminalType : TerminalType - The terminal that gnuplot should use to create the file. If set to <code>TerminalType::NONE</code> it is derived from the filetype. </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-save_1","title":"function save","text":"<pre><code>inline Multiplot &amp; save(\n    std::string filename =\"\",\n    OutputFileType filetype =OutputFileType::NONE,\n    TerminalType terminalType =TerminalType::NONE\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-show","title":"function show","text":"<pre><code>Multiplot &amp; show(\n    TerminalType terminalType =TerminalType::NONE\n)\n</code></pre> <p>Plots or re-plots the figure in a window. </p> <p>Parameters: </p> <ul> <li>terminalType : TerminalType - The terminal that gnuplot should use to creat the window and the plot. If <code>TerminalType::NONE</code> is provided, then gnuplot's default terminal will be used. </li> </ul>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-show_1","title":"function show","text":"<pre><code>Multiplot &amp; show(\n    OutputFileType filetype\n)\n</code></pre> <p>Plots or re-plots the figure in a window. </p> <p>Parameters: </p> <ul> <li>filetype : OutputFileType - The file type as which the plot should be made and which should be used to deduce gnuplots plotting terminal from. </li> </ul> <p>Like show(TerminalType terminalType) but will infere the terminal-type from the file-type. Except for the gnuplot script file type <code>OutputFileType::gp</code>. If that is provided the gnuplot script will be printed to stdout (the command line).</p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-plot","title":"function plot","text":"<pre><code>const Multiplot &amp; plot(\n    FILE * fptr,\n    TerminalType terminalType =TerminalType::NONE,\n    std::string saveAs =\"\"\n) const\n</code></pre> <p>Plots the Multiplot to the provided file stream. </p> <p>Parameters: </p> <ul> <li>fptr : FILE* - A filepointer to which the gnuplot script should be streamed to </li> <li>terminalType : TerminalType - The terminal type that should be used for the plot. If <code>TerminalType::NONE</code> is provided, gnuplot's default one will be used </li> <li>saveAs : std::string - [You should probably use save(std::string, OutputFileType, TerminalType) instead.] Filename under which to store the figure. If empty nothing will be stored. If not empty a command will be sent to save the current figure under that name. Note that this function will not derive the terminal type or plotting device from the file ending. So providing \"plot.png\", may not result in a PNG-file, if the wrong <code>terminalType</code> has been selected. </li> </ul> <p>Will be used as a backend of save(std::string, OutputFileType, TerminalType) and show(TerminalType), that create a pipe stream to gnuplot that will then be fed the gnuplot script - so use those functions instead. Alternatively it can be used for debugging by providing stdout to the parameter <code>fptr</code> which will print the gnuplot script for the plot to the standard output (command line terminal).</p>"},{"location":"API/Classes/classplotpp_1_1_multiplot/#function-plot_1","title":"function plot","text":"<pre><code>inline Multiplot &amp; plot(\n    FILE * fptr,\n    TerminalType terminalType =TerminalType::NONE,\n    std::string saveAs =\"\"\n)\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_piechart/","title":"plotpp::Piechart","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_piechart/#public-functions","title":"Public Functions","text":"Name template &lt;ForwardRange Tvalues&gt;  Piechart(optional_ptr&lt; Tnames &gt; names, const Tvalues &amp; values) Piechart &amp; label(const char * label) Piechart &amp;&amp; label(const char * label) Piechart &amp; label(std::string_view label) Piechart &amp;&amp; label(std::string_view label) Piechart &amp; label(std::string &amp;&amp; label) Piechart &amp;&amp; label(std::string &amp;&amp; label) LineType lineType() const Piechart &amp; lineType(LineType lt) Piechart &amp;&amp; lineType(LineType lt) float lineWidth() const Piechart &amp; lineWidth(float lw) Piechart &amp;&amp; lineWidth(float lw) const FillStyle &amp; fill() const Piechart &amp; fillSolid(float opacity =1.0, bool transparent =false) Piechart &amp;&amp; fillSolid(float opacity =1.0, bool transparent =false) Piechart &amp; fillClear() Piechart &amp;&amp; fillClear() Piechart &amp; fillPattern(int n) Piechart &amp;&amp; fillPattern(int n) virtual void printData(FILE * fptr) const virtual void printPlot(FILE * fptr) const"},{"location":"API/Classes/classplotpp_1_1_piechart/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_piechart/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;ForwardRange Tnames&gt;\nclass plotpp::Piechart;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_piechart/#function-piechart","title":"function Piechart","text":"<pre><code>template &lt;ForwardRange Tvalues&gt;\ninline Piechart(\n    optional_ptr&lt; Tnames &gt; names,\n    const Tvalues &amp; values\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-label","title":"function label","text":"<pre><code>inline Piechart &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-label_1","title":"function label","text":"<pre><code>inline Piechart &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-label_2","title":"function label","text":"<pre><code>inline Piechart &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-label_3","title":"function label","text":"<pre><code>inline Piechart &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-label_4","title":"function label","text":"<pre><code>inline Piechart &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-label_5","title":"function label","text":"<pre><code>inline Piechart &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-linetype","title":"function lineType","text":"<pre><code>inline LineType lineType() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-linetype_1","title":"function lineType","text":"<pre><code>inline Piechart &amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-linetype_2","title":"function lineType","text":"<pre><code>inline Piechart &amp;&amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-linewidth","title":"function lineWidth","text":"<pre><code>inline float lineWidth() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-linewidth_1","title":"function lineWidth","text":"<pre><code>inline Piechart &amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-linewidth_2","title":"function lineWidth","text":"<pre><code>inline Piechart &amp;&amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-fill","title":"function fill","text":"<pre><code>inline const FillStyle &amp; fill() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-fillsolid","title":"function fillSolid","text":"<pre><code>inline Piechart &amp; fillSolid(\n    float opacity =1.0,\n    bool transparent =false\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-fillsolid_1","title":"function fillSolid","text":"<pre><code>inline Piechart &amp;&amp; fillSolid(\n    float opacity =1.0,\n    bool transparent =false\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-fillclear","title":"function fillClear","text":"<pre><code>inline Piechart &amp; fillClear()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-fillclear_1","title":"function fillClear","text":"<pre><code>inline Piechart &amp;&amp; fillClear()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-fillpattern","title":"function fillPattern","text":"<pre><code>inline Piechart &amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-fillpattern_1","title":"function fillPattern","text":"<pre><code>inline Piechart &amp;&amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p>"},{"location":"API/Classes/classplotpp_1_1_piechart/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_points/","title":"plotpp::Points","text":"<p>Represents a point plot from x- and y-coordiantes.  More...</p> <p><code>#include &lt;Points.hpp&gt;</code></p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_points/#public-functions","title":"Public Functions","text":"Name Points(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y)Constructs a Points plot with optional x and y coordinate ranges. Points(Points const &amp; ) =defaultDefault copy constructor. Points(Points &amp;&amp; ) =defaultDefault move constructor. Points &amp; operator=(Points const &amp; ) =defaultDefault copy assignment constructor. Points &amp; operator=(Points &amp;&amp; ) =defaultDefault move assignment constructor. Points &amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. Points &amp;&amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. Points &amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. Points &amp;&amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. PointType pointType() constGets the point type. Points &amp; pointType(PointType pt)Sets the point type. Points &amp;&amp; pointType(PointType pt)Sets the point type. float pointSize() constGets the point size. Points &amp; pointSize(float ps)Sets the point size. Points &amp;&amp; pointSize(float ps)Sets the point size. Color color() constGets the plot color. Points &amp; color(Color col)Sets the point color. Points &amp;&amp; color(Color col)Sets the point color. bool isAutoColor() constTells whether automatic coloring is enabled. Points &amp; setAutoColor()Enables automatic coloring with multiple plots. Points &amp;&amp; setAutoColor()Enables automatic coloring with multiple plots. virtual void printPlot(FILE * fptr) const overrideprints the plot command for gnuplot virtual void printData(FILE * fptr) const overrideprints the data for gnuplot"},{"location":"API/Classes/classplotpp_1_1_points/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_points/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;class Tx ,\nclass Ty &gt;\nclass plotpp::Points;\n</code></pre> <p>Represents a point plot from x- and y-coordiantes. </p> <p>Template Parameters: </p> <ul> <li>Tx Type for x-coordinate range, must satisfy std::ranges::forward_range (aka. have forward <code>begin()</code> and <code>end()</code> iterators) </li> <li>Ty Type for y-coordinate range, must satisfy std::ranges::forward_range () </li> </ul> <p>The Point class holds information about how to draw a point plot in a figure. It supports various customizations such as point type, color, and fill styles.</p>"},{"location":"API/Classes/classplotpp_1_1_points/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_points/#function-points","title":"function Points","text":"<pre><code>inline Points(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y\n)\n</code></pre> <p>Constructs a Points plot with optional x and y coordinate ranges. </p> <p>Parameters: </p> <ul> <li>x Optional pointer to the x-coordinate range. </li> <li>y Pointer to the y-coordinate range. </li> </ul> <p>Suggestion: Use these construction helpers instead:</p> <ul> <li>points(U1&amp;&amp; x, U2&amp;&amp; y)</li> <li>points(U2&amp;&amp; y)</li> <li>scatter(U1&amp;&amp; x, U2&amp;&amp; y)</li> <li>auto scatter(U2&amp;&amp; y)</li> </ul>"},{"location":"API/Classes/classplotpp_1_1_points/#function-points_1","title":"function Points","text":"<pre><code>Points(\n    Points const &amp; \n) =default\n</code></pre> <p>Default copy constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-points_2","title":"function Points","text":"<pre><code>Points(\n    Points &amp;&amp; \n) =default\n</code></pre> <p>Default move constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-operator","title":"function operator=","text":"<pre><code>Points &amp; operator=(\n    Points const &amp; \n) =default\n</code></pre> <p>Default copy assignment constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-operator_1","title":"function operator=","text":"<pre><code>Points &amp; operator=(\n    Points &amp;&amp; \n) =default\n</code></pre> <p>Default move assignment constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-label","title":"function label","text":"<pre><code>inline Points &amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-label_1","title":"function label","text":"<pre><code>inline Points &amp;&amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-label_2","title":"function label","text":"<pre><code>inline Points &amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-label_3","title":"function label","text":"<pre><code>inline Points &amp;&amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-pointtype","title":"function pointType","text":"<pre><code>inline PointType pointType() const\n</code></pre> <p>Gets the point type. </p> <p>Return: PointType - The current point type </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-pointtype_1","title":"function pointType","text":"<pre><code>inline Points &amp; pointType(\n    PointType pt\n)\n</code></pre> <p>Sets the point type. </p> <p>Parameters: </p> <ul> <li>pt : PointType - The new point type </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-pointtype_2","title":"function pointType","text":"<pre><code>inline Points &amp;&amp; pointType(\n    PointType pt\n)\n</code></pre> <p>Sets the point type. </p> <p>Parameters: </p> <ul> <li>pt : PointType - The new point type </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-pointsize","title":"function pointSize","text":"<pre><code>inline float pointSize() const\n</code></pre> <p>Gets the point size. </p> <p>Return: float - The current point size </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-pointsize_1","title":"function pointSize","text":"<pre><code>inline Points &amp; pointSize(\n    float ps\n)\n</code></pre> <p>Sets the point size. </p> <p>Parameters: </p> <ul> <li>ps : float - The new point size </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-pointsize_2","title":"function pointSize","text":"<pre><code>inline Points &amp;&amp; pointSize(\n    float ps\n)\n</code></pre> <p>Sets the point size. </p> <p>Parameters: </p> <ul> <li>ps : float - The new point size </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre> <p>Gets the plot color. </p> <p>Return: Color - The current point color </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-color_1","title":"function color","text":"<pre><code>inline Points &amp; color(\n    Color col\n)\n</code></pre> <p>Sets the point color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new point color </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-color_2","title":"function color","text":"<pre><code>inline Points &amp;&amp; color(\n    Color col\n)\n</code></pre> <p>Sets the point color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new point color </li> </ul> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-isautocolor","title":"function isAutoColor","text":"<pre><code>inline bool isAutoColor() const\n</code></pre> <p>Tells whether automatic coloring is enabled. </p> <p>Return: bool - <code>true</code> if automatic coloring is enabled, <code>false</code> otherwise </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-setautocolor","title":"function setAutoColor","text":"<pre><code>inline Points &amp; setAutoColor()\n</code></pre> <p>Enables automatic coloring with multiple plots. </p> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-setautocolor_1","title":"function setAutoColor","text":"<pre><code>inline Points &amp;&amp; setAutoColor()\n</code></pre> <p>Enables automatic coloring with multiple plots. </p> <p>Return: Points - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the plot command for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printPlot</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p>"},{"location":"API/Classes/classplotpp_1_1_points/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the data for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printData</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_steps/","title":"plotpp::Steps","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_steps/#public-functions","title":"Public Functions","text":"Name Steps(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y) Steps(Steps const &amp; ) =default Steps(Steps &amp;&amp; ) =default Steps &amp; operator=(Steps const &amp; ) =default Steps &amp; operator=(Steps &amp;&amp; ) =default LineType lineType() const Steps &amp; lineType(LineType lt) Steps &amp;&amp; lineType(LineType lt) float lineWidth() const Steps &amp; lineWidth(float lw) Steps &amp;&amp; lineWidth(float lw) Color lineColor() const Steps &amp; lineColor(Color col) Steps &amp;&amp; lineColor(Color col) Steps &amp; lineColor(float r, float g, float b) Steps &amp;&amp; lineColor(float r, float g, float b) Color fillColor() const Steps &amp; fillColor(Color col) Steps &amp;&amp; fillColor(Color col) Steps &amp; fillColor(float r, float g, float b) Steps &amp;&amp; fillColor(float r, float g, float b) Steps &amp; color(Color col) Steps &amp;&amp; color(Color col) Steps &amp; color(float r, float g, float b) Steps &amp;&amp; color(float r, float g, float b) Steps &amp; autoLineColor() Steps &amp;&amp; autoLineColor() Steps &amp; autoFillColor() Steps &amp;&amp; autoFillColor() Steps &amp; autoColor() Steps &amp;&amp; autoColor() Steps &amp; fill(float opacity =0.3) Steps &amp;&amp; fill(float opacity =0.3) Steps &amp; fillPattern(int n) Steps &amp;&amp; fillPattern(int n) Steps &amp; noFill() Steps &amp;&amp; noFill() bool isFilled() const virtual void printPlot(FILE * fptr) const override virtual void printData(FILE * fptr) const override Steps &amp; label(const char * label) Steps &amp;&amp; label(const char * label) Steps &amp; label(std::string_view label) Steps &amp;&amp; label(std::string_view label) Steps &amp; label(std::string &amp;&amp; label) Steps &amp;&amp; label(std::string &amp;&amp; label)"},{"location":"API/Classes/classplotpp_1_1_steps/#public-attributes","title":"Public Attributes","text":"Name optional_ptr&lt; Tx &gt; x_ optional_ptr&lt; Ty &gt; y_ std::optional&lt; Color &gt; opt_line_color std::optional&lt; Color &gt; opt_fill_color LineType line_type float line_width FillStyle fill_style"},{"location":"API/Classes/classplotpp_1_1_steps/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_steps/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;ForwardRange Tx,\nForwardRange Ty&gt;\nclass plotpp::Steps;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_steps/#function-steps","title":"function Steps","text":"<pre><code>inline Steps(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-steps_1","title":"function Steps","text":"<pre><code>Steps(\n    Steps const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-steps_2","title":"function Steps","text":"<pre><code>Steps(\n    Steps &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-operator","title":"function operator=","text":"<pre><code>Steps &amp; operator=(\n    Steps const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-operator_1","title":"function operator=","text":"<pre><code>Steps &amp; operator=(\n    Steps &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linetype","title":"function lineType","text":"<pre><code>inline LineType lineType() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linetype_1","title":"function lineType","text":"<pre><code>inline Steps &amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linetype_2","title":"function lineType","text":"<pre><code>inline Steps &amp;&amp; lineType(\n    LineType lt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linewidth","title":"function lineWidth","text":"<pre><code>inline float lineWidth() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linewidth_1","title":"function lineWidth","text":"<pre><code>inline Steps &amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linewidth_2","title":"function lineWidth","text":"<pre><code>inline Steps &amp;&amp; lineWidth(\n    float lw\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linecolor","title":"function lineColor","text":"<pre><code>inline Color lineColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linecolor_1","title":"function lineColor","text":"<pre><code>inline Steps &amp; lineColor(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linecolor_2","title":"function lineColor","text":"<pre><code>inline Steps &amp;&amp; lineColor(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linecolor_3","title":"function lineColor","text":"<pre><code>inline Steps &amp; lineColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-linecolor_4","title":"function lineColor","text":"<pre><code>inline Steps &amp;&amp; lineColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fillcolor","title":"function fillColor","text":"<pre><code>inline Color fillColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fillcolor_1","title":"function fillColor","text":"<pre><code>inline Steps &amp; fillColor(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fillcolor_2","title":"function fillColor","text":"<pre><code>inline Steps &amp;&amp; fillColor(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fillcolor_3","title":"function fillColor","text":"<pre><code>inline Steps &amp; fillColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fillcolor_4","title":"function fillColor","text":"<pre><code>inline Steps &amp;&amp; fillColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-color","title":"function color","text":"<pre><code>inline Steps &amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-color_1","title":"function color","text":"<pre><code>inline Steps &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-color_2","title":"function color","text":"<pre><code>inline Steps &amp; color(\n    float r,\n    float g,\n    float b\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-color_3","title":"function color","text":"<pre><code>inline Steps &amp;&amp; color(\n    float r,\n    float g,\n    float b\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-autolinecolor","title":"function autoLineColor","text":"<pre><code>inline Steps &amp; autoLineColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-autolinecolor_1","title":"function autoLineColor","text":"<pre><code>inline Steps &amp;&amp; autoLineColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-autofillcolor","title":"function autoFillColor","text":"<pre><code>inline Steps &amp; autoFillColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-autofillcolor_1","title":"function autoFillColor","text":"<pre><code>inline Steps &amp;&amp; autoFillColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-autocolor","title":"function autoColor","text":"<pre><code>inline Steps &amp; autoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-autocolor_1","title":"function autoColor","text":"<pre><code>inline Steps &amp;&amp; autoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fill","title":"function fill","text":"<pre><code>inline Steps &amp; fill(\n    float opacity =0.3\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fill_1","title":"function fill","text":"<pre><code>inline Steps &amp;&amp; fill(\n    float opacity =0.3\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fillpattern","title":"function fillPattern","text":"<pre><code>inline Steps &amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-fillpattern_1","title":"function fillPattern","text":"<pre><code>inline Steps &amp;&amp; fillPattern(\n    int n\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-nofill","title":"function noFill","text":"<pre><code>inline Steps &amp; noFill()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-nofill_1","title":"function noFill","text":"<pre><code>inline Steps &amp;&amp; noFill()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-isfilled","title":"function isFilled","text":"<pre><code>inline bool isFilled() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-label","title":"function label","text":"<pre><code>inline Steps &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-label_1","title":"function label","text":"<pre><code>inline Steps &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-label_2","title":"function label","text":"<pre><code>inline Steps &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-label_3","title":"function label","text":"<pre><code>inline Steps &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-label_4","title":"function label","text":"<pre><code>inline Steps &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#function-label_5","title":"function label","text":"<pre><code>inline Steps &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_steps/#variable-x_","title":"variable x_","text":"<pre><code>optional_ptr&lt; Tx &gt; x_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#variable-y_","title":"variable y_","text":"<pre><code>optional_ptr&lt; Ty &gt; y_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#variable-opt_line_color","title":"variable opt_line_color","text":"<pre><code>std::optional&lt; Color &gt; opt_line_color = std::nullopt;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#variable-opt_fill_color","title":"variable opt_fill_color","text":"<pre><code>std::optional&lt; Color &gt; opt_fill_color = std::nullopt;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#variable-line_type","title":"variable line_type","text":"<pre><code>LineType line_type = LineType::solid;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#variable-line_width","title":"variable line_width","text":"<pre><code>float line_width = 1.5;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_steps/#variable-fill_style","title":"variable fill_style","text":"<pre><code>FillStyle fill_style;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_text/","title":"plotpp::Text","text":""},{"location":"API/Classes/classplotpp_1_1_text/#public-functions","title":"Public Functions","text":"Name Text() =default Text(std::string str) Text(const char * str) Text(const Text &amp; ) =default Text(Text &amp;&amp; ) =default Text &amp; operator=(const Text &amp; ) =default Text &amp; operator=(Text &amp;&amp; ) =default Text &amp; operator=(const std::string str) bool empty() const operator std::string() const"},{"location":"API/Classes/classplotpp_1_1_text/#public-attributes","title":"Public Attributes","text":"Name std::string str unsigned int height bool bold bool italic"},{"location":"API/Classes/classplotpp_1_1_text/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_text/#function-text","title":"function Text","text":"<pre><code>Text() =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-text_1","title":"function Text","text":"<pre><code>Text(\n    std::string str\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-text_2","title":"function Text","text":"<pre><code>Text(\n    const char * str\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-text_3","title":"function Text","text":"<pre><code>Text(\n    const Text &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-text_4","title":"function Text","text":"<pre><code>Text(\n    Text &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-operator","title":"function operator=","text":"<pre><code>Text &amp; operator=(\n    const Text &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-operator_1","title":"function operator=","text":"<pre><code>Text &amp; operator=(\n    Text &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-operator_2","title":"function operator=","text":"<pre><code>Text &amp; operator=(\n    const std::string str\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-empty","title":"function empty","text":"<pre><code>bool empty() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#function-operator-stdstring","title":"function operator std::string","text":"<pre><code>operator std::string() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_text/#variable-str","title":"variable str","text":"<pre><code>std::string str = \"\";\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#variable-height","title":"variable height","text":"<pre><code>unsigned int height = 18;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#variable-bold","title":"variable bold","text":"<pre><code>bool bold = false;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_text/#variable-italic","title":"variable italic","text":"<pre><code>bool italic = false;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_x_error/","title":"plotpp::XError","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_x_error/#public-functions","title":"Public Functions","text":"Name XError(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y, optional_ptr&lt; Txerr &gt; xerror) XError(XError const &amp; ) =default XError(XError &amp;&amp; ) =default XError &amp; operator=(XError const &amp; ) =default XError &amp; operator=(XError &amp;&amp; ) =default XError &amp; label(const char * label) XError &amp;&amp; label(const char * label) XError &amp; label(std::string_view label) XError &amp;&amp; label(std::string_view label) XError &amp; label(std::string &amp;&amp; label) XError &amp;&amp; label(std::string &amp;&amp; label) PointType pointType() const XError &amp; pointType(PointType pt) XError &amp;&amp; pointType(PointType pt) float pointSize() const XError &amp; pointSize(float ps) XError &amp;&amp; pointSize(float ps) Color color() const XError &amp; color(Color col) XError &amp;&amp; color(Color col) bool isAutoColor() const XError &amp; setAutoColor() XError &amp;&amp; setAutoColor() virtual void printPlot(FILE * fptr) const virtual void printData(FILE * fptr) const"},{"location":"API/Classes/classplotpp_1_1_x_error/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_x_error/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;class Tx ,\nclass Ty ,\nclass Txerr &gt;\nclass plotpp::XError;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_x_error/#function-xerror","title":"function XError","text":"<pre><code>inline XError(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y,\n    optional_ptr&lt; Txerr &gt; xerror\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-xerror_1","title":"function XError","text":"<pre><code>XError(\n    XError const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-xerror_2","title":"function XError","text":"<pre><code>XError(\n    XError &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-operator","title":"function operator=","text":"<pre><code>XError &amp; operator=(\n    XError const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-operator_1","title":"function operator=","text":"<pre><code>XError &amp; operator=(\n    XError &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-label","title":"function label","text":"<pre><code>inline XError &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-label_1","title":"function label","text":"<pre><code>inline XError &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-label_2","title":"function label","text":"<pre><code>inline XError &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-label_3","title":"function label","text":"<pre><code>inline XError &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-label_4","title":"function label","text":"<pre><code>inline XError &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-label_5","title":"function label","text":"<pre><code>inline XError &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-pointtype","title":"function pointType","text":"<pre><code>inline PointType pointType() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-pointtype_1","title":"function pointType","text":"<pre><code>inline XError &amp; pointType(\n    PointType pt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-pointtype_2","title":"function pointType","text":"<pre><code>inline XError &amp;&amp; pointType(\n    PointType pt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-pointsize","title":"function pointSize","text":"<pre><code>inline float pointSize() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-pointsize_1","title":"function pointSize","text":"<pre><code>inline XError &amp; pointSize(\n    float ps\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-pointsize_2","title":"function pointSize","text":"<pre><code>inline XError &amp;&amp; pointSize(\n    float ps\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-color_1","title":"function color","text":"<pre><code>inline XError &amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-color_2","title":"function color","text":"<pre><code>inline XError &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-isautocolor","title":"function isAutoColor","text":"<pre><code>inline bool isAutoColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-setautocolor","title":"function setAutoColor","text":"<pre><code>inline XError &amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-setautocolor_1","title":"function setAutoColor","text":"<pre><code>inline XError &amp;&amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_x_error/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/","title":"plotpp::XYError","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#public-functions","title":"Public Functions","text":"Name XYError(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y, optional_ptr&lt; Txerr &gt; xerror, optional_ptr&lt; Tyerr &gt; yerror) XYError(XYError const &amp; ) =default XYError(XYError &amp;&amp; ) =default XYError &amp; operator=(XYError const &amp; ) =default XYError &amp; operator=(XYError &amp;&amp; ) =default XYError &amp; label(const char * label) XYError &amp;&amp; label(const char * label) XYError &amp; label(std::string_view label) XYError &amp;&amp; label(std::string_view label) XYError &amp; label(std::string &amp;&amp; label) XYError &amp;&amp; label(std::string &amp;&amp; label) PointType pointType() const XYError &amp; pointType(PointType pt) XYError &amp;&amp; pointType(PointType pt) float pointSize() const XYError &amp; pointSize(float ps) XYError &amp;&amp; pointSize(float ps) Color color() const XYError &amp; color(Color col) XYError &amp;&amp; color(Color col) bool isAutoColor() const XYError &amp; setAutoColor() XYError &amp;&amp; setAutoColor() virtual void printPlot(FILE * fptr) const virtual void printData(FILE * fptr) const"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;class Tx ,\nclass Ty ,\nclass Txerr ,\nclass Tyerr &gt;\nclass plotpp::XYError;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-xyerror","title":"function XYError","text":"<pre><code>inline XYError(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y,\n    optional_ptr&lt; Txerr &gt; xerror,\n    optional_ptr&lt; Tyerr &gt; yerror\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-xyerror_1","title":"function XYError","text":"<pre><code>XYError(\n    XYError const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-xyerror_2","title":"function XYError","text":"<pre><code>XYError(\n    XYError &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-operator","title":"function operator=","text":"<pre><code>XYError &amp; operator=(\n    XYError const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-operator_1","title":"function operator=","text":"<pre><code>XYError &amp; operator=(\n    XYError &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-label","title":"function label","text":"<pre><code>inline XYError &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-label_1","title":"function label","text":"<pre><code>inline XYError &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-label_2","title":"function label","text":"<pre><code>inline XYError &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-label_3","title":"function label","text":"<pre><code>inline XYError &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-label_4","title":"function label","text":"<pre><code>inline XYError &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-label_5","title":"function label","text":"<pre><code>inline XYError &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-pointtype","title":"function pointType","text":"<pre><code>inline PointType pointType() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-pointtype_1","title":"function pointType","text":"<pre><code>inline XYError &amp; pointType(\n    PointType pt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-pointtype_2","title":"function pointType","text":"<pre><code>inline XYError &amp;&amp; pointType(\n    PointType pt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-pointsize","title":"function pointSize","text":"<pre><code>inline float pointSize() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-pointsize_1","title":"function pointSize","text":"<pre><code>inline XYError &amp; pointSize(\n    float ps\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-pointsize_2","title":"function pointSize","text":"<pre><code>inline XYError &amp;&amp; pointSize(\n    float ps\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-color_1","title":"function color","text":"<pre><code>inline XYError &amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-color_2","title":"function color","text":"<pre><code>inline XYError &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-isautocolor","title":"function isAutoColor","text":"<pre><code>inline bool isAutoColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-setautocolor","title":"function setAutoColor","text":"<pre><code>inline XYError &amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-setautocolor_1","title":"function setAutoColor","text":"<pre><code>inline XYError &amp;&amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_x_y_error/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_y_error/","title":"plotpp::YError","text":"<p>More...</p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_y_error/#public-functions","title":"Public Functions","text":"Name YError(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y, optional_ptr&lt; Tyerr &gt; yerr) YError(YError const &amp; ) =default YError(YError &amp;&amp; ) =default YError &amp; operator=(YError const &amp; ) =default YError &amp; operator=(YError &amp;&amp; ) =default YError &amp; label(const char * label) YError &amp;&amp; label(const char * label) YError &amp; label(std::string_view label) YError &amp;&amp; label(std::string_view label) YError &amp; label(std::string &amp;&amp; label) YError &amp;&amp; label(std::string &amp;&amp; label) PointType pointType() const YError &amp; pointType(PointType pt) YError &amp;&amp; pointType(PointType pt) float pointSize() const YError &amp; pointSize(float ps) YError &amp;&amp; pointSize(float ps) Color color() const YError &amp; color(Color col) YError &amp;&amp; color(Color col) bool isAutoColor() const YError &amp; setAutoColor() YError &amp;&amp; setAutoColor() virtual void printPlot(FILE * fptr) const virtual void printData(FILE * fptr) const"},{"location":"API/Classes/classplotpp_1_1_y_error/#public-attributes","title":"Public Attributes","text":"Name optional_ptr&lt; Tx &gt; x_ optional_ptr&lt; Ty &gt; y_ optional_ptr&lt; Tyerr &gt; yerror_ std::optional&lt; Color &gt; opt_color PointType point_type float point_size"},{"location":"API/Classes/classplotpp_1_1_y_error/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_y_error/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;class Tx ,\nclass Ty ,\nclass Tyerr &gt;\nclass plotpp::YError;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_y_error/#function-yerror","title":"function YError","text":"<pre><code>inline YError(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y,\n    optional_ptr&lt; Tyerr &gt; yerr\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-yerror_1","title":"function YError","text":"<pre><code>YError(\n    YError const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-yerror_2","title":"function YError","text":"<pre><code>YError(\n    YError &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-operator","title":"function operator=","text":"<pre><code>YError &amp; operator=(\n    YError const &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-operator_1","title":"function operator=","text":"<pre><code>YError &amp; operator=(\n    YError &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-label","title":"function label","text":"<pre><code>inline YError &amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-label_1","title":"function label","text":"<pre><code>inline YError &amp;&amp; label(\n    const char * label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-label_2","title":"function label","text":"<pre><code>inline YError &amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-label_3","title":"function label","text":"<pre><code>inline YError &amp;&amp; label(\n    std::string_view label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-label_4","title":"function label","text":"<pre><code>inline YError &amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-label_5","title":"function label","text":"<pre><code>inline YError &amp;&amp; label(\n    std::string &amp;&amp; label\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-pointtype","title":"function pointType","text":"<pre><code>inline PointType pointType() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-pointtype_1","title":"function pointType","text":"<pre><code>inline YError &amp; pointType(\n    PointType pt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-pointtype_2","title":"function pointType","text":"<pre><code>inline YError &amp;&amp; pointType(\n    PointType pt\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-pointsize","title":"function pointSize","text":"<pre><code>inline float pointSize() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-pointsize_1","title":"function pointSize","text":"<pre><code>inline YError &amp; pointSize(\n    float ps\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-pointsize_2","title":"function pointSize","text":"<pre><code>inline YError &amp;&amp; pointSize(\n    float ps\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-color","title":"function color","text":"<pre><code>inline Color color() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-color_1","title":"function color","text":"<pre><code>inline YError &amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-color_2","title":"function color","text":"<pre><code>inline YError &amp;&amp; color(\n    Color col\n)\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-isautocolor","title":"function isAutoColor","text":"<pre><code>inline bool isAutoColor() const\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-setautocolor","title":"function setAutoColor","text":"<pre><code>inline YError &amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-setautocolor_1","title":"function setAutoColor","text":"<pre><code>inline YError &amp;&amp; setAutoColor()\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printPlot</p>"},{"location":"API/Classes/classplotpp_1_1_y_error/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const\n</code></pre> <p>Reimplements: plotpp::IPlot::printData</p>"},{"location":"API/Classes/classplotpp_1_1_y_error/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_y_error/#variable-x_","title":"variable x_","text":"<pre><code>optional_ptr&lt; Tx &gt; x_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#variable-y_","title":"variable y_","text":"<pre><code>optional_ptr&lt; Ty &gt; y_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#variable-yerror_","title":"variable yerror_","text":"<pre><code>optional_ptr&lt; Tyerr &gt; yerror_;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#variable-opt_color","title":"variable opt_color","text":"<pre><code>std::optional&lt; Color &gt; opt_color = std::nullopt;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#variable-point_type","title":"variable point_type","text":"<pre><code>PointType point_type = PointType::CircleFilled;\n</code></pre>"},{"location":"API/Classes/classplotpp_1_1_y_error/#variable-point_size","title":"variable point_size","text":"<pre><code>float point_size = 1.0;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/","title":"plotpp::YErrorLine","text":"<p>Represents a YErrorLine plot from x- and y-coordiantes.  More...</p> <p><code>#include &lt;YErrorLine.hpp&gt;</code></p> <p>Inherits from plotpp::IPlot</p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#public-functions","title":"Public Functions","text":"Name YErrorLine(optional_ptr&lt; Tx &gt; x, optional_ptr&lt; Ty &gt; y, optional_ptr&lt; Terr &gt; err)Constructs a YErrorLine with optional x and y coordinate ranges. YErrorLine(YErrorLine const &amp; ) =defaultDefault copy constructor. YErrorLine(YErrorLine &amp;&amp; ) =defaultDefault move constructor. YErrorLine &amp; operator=(YErrorLine const &amp; ) =defaultDefault copy assignment. YErrorLine &amp; operator=(YErrorLine &amp;&amp; ) =defaultDefault move assignment. LineType lineType() constGets the YErrorLine type. YErrorLine &amp; lineType(LineType lt)Sets the YErrorLine type. YErrorLine &amp;&amp; lineType(LineType lt)Sets the YErrorLine type. float YErrorLineWidth() constGets the YErrorLine width. YErrorLine &amp; YErrorLineWidth(float lw)Sets the YErrorLine width. YErrorLine &amp;&amp; YErrorLineWidth(float lw)Sets the YErrorLine width. Color YErrorLineColor() constGets the YErrorLine color. YErrorLine &amp; YErrorLineColor(Color col)Sets the YErrorLine color. YErrorLine &amp;&amp; YErrorLineColor(Color col)Sets the YErrorLine color. YErrorLine &amp; YErrorLineColor(float r, float g, float b)Sets the YErrorLine color. YErrorLine &amp;&amp; YErrorLineColor(float r, float g, float b)Sets the YErrorLine color. Color fillColor() constGets the YErrorLine color. YErrorLine &amp; fillColor(Color col)Sets the fill color. YErrorLine &amp;&amp; fillColor(Color col)Sets the fill color. YErrorLine &amp; color(Color col)Sets the YErrorLine and fill color. YErrorLine &amp;&amp; color(Color col)Sets the YErrorLine and fill color. YErrorLine &amp; autoYErrorLineColor()Enables automatic YErrorLine coloring. YErrorLine &amp;&amp; autoYErrorLineColor()Enables automatic YErrorLine coloring. YErrorLine &amp; autoFillColor()Enables automatic fill coloring. YErrorLine &amp;&amp; autoFillColor()Enables automatic fill coloring. YErrorLine &amp; autoColor()Enables automatic YErrorLine and fill coloring. YErrorLine &amp;&amp; autoColor()Enables automatic YErrorLine and fill coloring. YErrorLine &amp; fill(float opacity =0.3)Sets the opacity of the fill color. YErrorLine &amp;&amp; fill(float opacity =0.3)Sets the opacity of the fill color. YErrorLine &amp; fillPattern(int n)Sets the fill pattern. YErrorLine &amp;&amp; fillPattern(int n)Sets the fill pattern. YErrorLine &amp; noFill()Disables the curve fill. YErrorLine &amp;&amp; noFill()Disables the curve fill. bool isFilled() constTells whether or not the fill is enabled. YErrorLine &amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. YErrorLine &amp;&amp; label(const PlotTitle &amp; label)Sets the label to be seen in the legend of the plot. YErrorLine &amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. YErrorLine &amp;&amp; label(PlotTitle &amp;&amp; label)Sets the label to be seen in the legend of the plot. Tx * x()Gets the x-values. const Tx * x() constGets the x-values. Ty * y()Gets the y-values. const Ty * y() constGets the y-values. virtual void printPlot(FILE * fptr) const overrideprints the plot command for gnuplot virtual void printData(FILE * fptr) const overrideprints the data for gnuplot"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#additional-inherited-members","title":"Additional inherited members","text":"<p>Public Functions inherited from plotpp::IPlot</p> Name IPlot() =default IPlot(std::string label) virtual ~IPlot() virtual void printSettings(std::ostream &amp; stream) const =delete virtual void printSettings(FILE * fptr) const <p>Protected Functions inherited from plotpp::IPlot</p> Name virtual IPlot &amp; uid(size_t &amp; uid_io) size_t uid() const <p>Friends inherited from plotpp::IPlot</p> Name class Figure"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;std::ranges::forward_range Tx,\nstd::ranges::forward_range Ty,\nstd::ranges::forward_range Terr&gt;\nclass plotpp::YErrorLine;\n</code></pre> <p>Represents a YErrorLine plot from x- and y-coordiantes. </p> <p>Template Parameters: </p> <ul> <li>Tx Type for x-coordinate range, must satisfy std::ranges::forward_range (aka. have forward <code>begin()</code> and <code>end()</code> iterators) </li> <li>Ty Type for y-coordinate range, must satisfy std::ranges::forward_range () </li> </ul> <p>The YErrorLine class holds information about how to draw a YErrorLine plot in a figure. It supports various customizations such as YErrorLine type, color, and fill styles.</p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorline","title":"function YErrorLine","text":"<pre><code>inline YErrorLine(\n    optional_ptr&lt; Tx &gt; x,\n    optional_ptr&lt; Ty &gt; y,\n    optional_ptr&lt; Terr &gt; err\n)\n</code></pre> <p>Constructs a YErrorLine with optional x and y coordinate ranges. </p> <p>Parameters: </p> <ul> <li>x optional_ptr to the x-coordinate range. </li> <li>y optional_ptr to the y-coordinate range. </li> </ul> <p>Suggestion: Use these construction helpers instead:</p> <ul> <li>YErrorLine(Ux&amp;&amp; x, Uy&amp;&amp; y)</li> <li>YErrorLine(Uy&amp;&amp; y)</li> </ul>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorline_1","title":"function YErrorLine","text":"<pre><code>YErrorLine(\n    YErrorLine const &amp; \n) =default\n</code></pre> <p>Default copy constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorline_2","title":"function YErrorLine","text":"<pre><code>YErrorLine(\n    YErrorLine &amp;&amp; \n) =default\n</code></pre> <p>Default move constructor. </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-operator","title":"function operator=","text":"<pre><code>YErrorLine &amp; operator=(\n    YErrorLine const &amp; \n) =default\n</code></pre> <p>Default copy assignment. </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-operator_1","title":"function operator=","text":"<pre><code>YErrorLine &amp; operator=(\n    YErrorLine &amp;&amp; \n) =default\n</code></pre> <p>Default move assignment. </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-linetype","title":"function lineType","text":"<pre><code>inline LineType lineType() const\n</code></pre> <p>Gets the YErrorLine type. </p> <p>Return: LineType - The current LineType </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-linetype_1","title":"function lineType","text":"<pre><code>inline YErrorLine &amp; lineType(\n    LineType lt\n)\n</code></pre> <p>Sets the YErrorLine type. </p> <p>Parameters: </p> <ul> <li>lt : LineType - The new YErrorLine type </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-linetype_2","title":"function lineType","text":"<pre><code>inline YErrorLine &amp;&amp; lineType(\n    LineType lt\n)\n</code></pre> <p>Sets the YErrorLine type. </p> <p>Parameters: </p> <ul> <li>lt : float - The new YErrorLine type </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinewidth","title":"function YErrorLineWidth","text":"<pre><code>inline float YErrorLineWidth() const\n</code></pre> <p>Gets the YErrorLine width. </p> <p>Return: float: The current YErrorLine width </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinewidth_1","title":"function YErrorLineWidth","text":"<pre><code>inline YErrorLine &amp; YErrorLineWidth(\n    float lw\n)\n</code></pre> <p>Sets the YErrorLine width. </p> <p>Parameters: </p> <ul> <li>lw : float - The new YErrorLine width </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinewidth_2","title":"function YErrorLineWidth","text":"<pre><code>inline YErrorLine &amp;&amp; YErrorLineWidth(\n    float lw\n)\n</code></pre> <p>Sets the YErrorLine width. </p> <p>Parameters: </p> <ul> <li>lw : float - The new YErrorLine width </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinecolor","title":"function YErrorLineColor","text":"<pre><code>inline Color YErrorLineColor() const\n</code></pre> <p>Gets the YErrorLine color. </p> <p>Return: Color - the current YErrorLine color </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinecolor_1","title":"function YErrorLineColor","text":"<pre><code>inline YErrorLine &amp; YErrorLineColor(\n    Color col\n)\n</code></pre> <p>Sets the YErrorLine color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new YErrorLine color </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinecolor_2","title":"function YErrorLineColor","text":"<pre><code>inline YErrorLine &amp;&amp; YErrorLineColor(\n    Color col\n)\n</code></pre> <p>Sets the YErrorLine color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new YErrorLine color </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinecolor_3","title":"function YErrorLineColor","text":"<pre><code>inline YErrorLine &amp; YErrorLineColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre> <p>Sets the YErrorLine color. </p> <p>Parameters: </p> <ul> <li>rgb : float - The new YErrorLine color in rgb-values in the range [0, 1] </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-yerrorlinecolor_4","title":"function YErrorLineColor","text":"<pre><code>inline YErrorLine &amp;&amp; YErrorLineColor(\n    float r,\n    float g,\n    float b\n)\n</code></pre> <p>Sets the YErrorLine color. </p> <p>Parameters: </p> <ul> <li>rgb : float - The new YErrorLine color in rgb-values in the range [0, 1] </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-fillcolor","title":"function fillColor","text":"<pre><code>inline Color fillColor() const\n</code></pre> <p>Gets the YErrorLine color. </p> <p>Return: Color - the current fill color </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-fillcolor_1","title":"function fillColor","text":"<pre><code>inline YErrorLine &amp; fillColor(\n    Color col\n)\n</code></pre> <p>Sets the fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-fillcolor_2","title":"function fillColor","text":"<pre><code>inline YErrorLine &amp;&amp; fillColor(\n    Color col\n)\n</code></pre> <p>Sets the fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-color","title":"function color","text":"<pre><code>inline YErrorLine &amp; color(\n    Color col\n)\n</code></pre> <p>Sets the YErrorLine and fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new YErrorLine and fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-color_1","title":"function color","text":"<pre><code>inline YErrorLine &amp;&amp; color(\n    Color col\n)\n</code></pre> <p>Sets the YErrorLine and fill color. </p> <p>Parameters: </p> <ul> <li>col : Color - The new YErrorLine and fill color </li> </ul> <p>Return: fill - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-autoyerrorlinecolor","title":"function autoYErrorLineColor","text":"<pre><code>inline YErrorLine &amp; autoYErrorLineColor()\n</code></pre> <p>Enables automatic YErrorLine coloring. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-autoyerrorlinecolor_1","title":"function autoYErrorLineColor","text":"<pre><code>inline YErrorLine &amp;&amp; autoYErrorLineColor()\n</code></pre> <p>Enables automatic YErrorLine coloring. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-autofillcolor","title":"function autoFillColor","text":"<pre><code>inline YErrorLine &amp; autoFillColor()\n</code></pre> <p>Enables automatic fill coloring. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-autofillcolor_1","title":"function autoFillColor","text":"<pre><code>inline YErrorLine &amp;&amp; autoFillColor()\n</code></pre> <p>Enables automatic fill coloring. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-autocolor","title":"function autoColor","text":"<pre><code>inline YErrorLine &amp; autoColor()\n</code></pre> <p>Enables automatic YErrorLine and fill coloring. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-autocolor_1","title":"function autoColor","text":"<pre><code>inline YErrorLine &amp;&amp; autoColor()\n</code></pre> <p>Enables automatic YErrorLine and fill coloring. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-fill","title":"function fill","text":"<pre><code>inline YErrorLine &amp; fill(\n    float opacity =0.3\n)\n</code></pre> <p>Sets the opacity of the fill color. </p> <p>Parameters: </p> <ul> <li>rgb : float - the new opacity in a range of [0, 1] </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-fill_1","title":"function fill","text":"<pre><code>inline YErrorLine &amp;&amp; fill(\n    float opacity =0.3\n)\n</code></pre> <p>Sets the opacity of the fill color. </p> <p>Parameters: </p> <ul> <li>rgb : float - the new opacity in a range of [0, 1] </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-fillpattern","title":"function fillPattern","text":"<pre><code>inline YErrorLine &amp; fillPattern(\n    int n\n)\n</code></pre> <p>Sets the fill pattern. </p> <p>Parameters: </p> <ul> <li>n : int - Select one of Gnuplots fill patterns. May be benefitial for printing figures on paper. </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-fillpattern_1","title":"function fillPattern","text":"<pre><code>inline YErrorLine &amp;&amp; fillPattern(\n    int n\n)\n</code></pre> <p>Sets the fill pattern. </p> <p>Parameters: </p> <ul> <li>n : int - Select one of Gnuplots fill patterns. May be benefitial for printing figures on paper. </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-nofill","title":"function noFill","text":"<pre><code>inline YErrorLine &amp; noFill()\n</code></pre> <p>Disables the curve fill. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-nofill_1","title":"function noFill","text":"<pre><code>inline YErrorLine &amp;&amp; noFill()\n</code></pre> <p>Disables the curve fill. </p> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-isfilled","title":"function isFilled","text":"<pre><code>inline bool isFilled() const\n</code></pre> <p>Tells whether or not the fill is enabled. </p> <p>Return: bool - Returns <code>true</code> if the fill is enabled and <code>false</code> otherwise </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-label","title":"function label","text":"<pre><code>inline YErrorLine &amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-label_1","title":"function label","text":"<pre><code>inline YErrorLine &amp;&amp; label(\n    const PlotTitle &amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-label_2","title":"function label","text":"<pre><code>inline YErrorLine &amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-label_3","title":"function label","text":"<pre><code>inline YErrorLine &amp;&amp; label(\n    PlotTitle &amp;&amp; label\n)\n</code></pre> <p>Sets the label to be seen in the legend of the plot. </p> <p>Parameters: </p> <ul> <li>label : PlotTitle - A title of the plot containing the label to be displayed in the legend </li> </ul> <p>Return: YErrorLine - Self, for method chaining </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-x","title":"function x","text":"<pre><code>inline Tx * x()\n</code></pre> <p>Gets the x-values. </p> <p>Return: Tx - A pointer to the provided x-values of the plot. May be a <code>nullptr</code> if non were provided. </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-x_1","title":"function x","text":"<pre><code>inline const Tx * x() const\n</code></pre> <p>Gets the x-values. </p> <p>Return: Tx - A pointer to the provided x-values of the plot. May be a <code>nullptr</code> if non were provided. </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-y","title":"function y","text":"<pre><code>inline Ty * y()\n</code></pre> <p>Gets the y-values. </p> <p>Return: Ty - A pointer to the provided y-values of the plot </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-y_1","title":"function y","text":"<pre><code>inline const Ty * y() const\n</code></pre> <p>Gets the y-values. </p> <p>Return: Ty - A pointer to the provided y-values of the plot </p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-printplot","title":"function printPlot","text":"<pre><code>inline virtual void printPlot(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the plot command for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printPlot</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p>"},{"location":"API/Classes/classplotpp_1_1_y_error_line/#function-printdata","title":"function printData","text":"<pre><code>inline virtual void printData(\n    FILE * fptr\n) const override\n</code></pre> <p>prints the data for gnuplot </p> <p>Parameters: </p> <ul> <li>file : FILE - A pointer to the stream/file that the plot command shall be written to. </li> </ul> <p>Reimplements: plotpp::IPlot::printData</p> <p>This function does normally not need to be called by the user. The class Figure will take care it and the communication with Gnuplot.</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_arrow_head_style_01_4/","title":"fmt::formatter&lt; plotpp::ArrowHeadStyle &gt;","text":"<p>formats plotpp::ArrowHeadStyle for {fmt} strings. </p> <p><code>#include &lt;ArrowHeadStyle.hpp&gt;</code></p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_arrow_head_style_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const plotpp::ArrowHeadStyle &amp; ahs, FormatContext &amp; ctx) constformats plotpp::ArrowHeadStyle for {fmt} strings."},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_arrow_head_style_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_arrow_head_style_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_arrow_head_style_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const plotpp::ArrowHeadStyle &amp; ahs,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>formats plotpp::ArrowHeadStyle for {fmt} strings. </p> <p>Turns plotpp::ArrowHeadStyle enum-items into a {fmt} formatted string using plotpp::to_command()</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_color_01_4/","title":"fmt::formatter&lt; plotpp::Color &gt;","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_color_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const plotpp::Color &amp; color, FormatContext &amp; ctx) const"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_color_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_color_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_color_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const plotpp::Color &amp; color,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_fill_style_01_4/","title":"fmt::formatter&lt; plotpp::FillStyle &gt;","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_fill_style_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const plotpp::FillStyle &amp; fill, FormatContext &amp; ctx) const"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_fill_style_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_fill_style_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_fill_style_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const plotpp::FillStyle &amp; fill,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_line_type_01_4/","title":"fmt::formatter&lt; plotpp::LineType &gt;","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_line_type_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const plotpp::LineType &amp; lt, FormatContext &amp; ctx) const"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_line_type_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_line_type_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_line_type_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const plotpp::LineType &amp; lt,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_plot_title_01_4/","title":"fmt::formatter&lt; plotpp::PlotTitle &gt;","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_plot_title_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const plotpp::PlotTitle &amp; title, FormatContext &amp; ctx) const"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_plot_title_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_plot_title_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_plot_title_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const plotpp::PlotTitle &amp; title,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_point_type_01_4/","title":"fmt::formatter&lt; plotpp::PointType &gt;","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_point_type_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const plotpp::PointType &amp; pt, FormatContext &amp; ctx) const"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_point_type_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_point_type_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_point_type_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const plotpp::PointType &amp; pt,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_text_01_4/","title":"fmt::formatter&lt; plotpp::Text &gt;","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_text_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const plotpp::Text &amp; text, FormatContext &amp; ctx) const"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_text_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_text_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01plotpp_1_1_text_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const plotpp::Text &amp; text,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structfmt_1_1formatter_3_01std_1_1optional_3_01plotpp_1_1_color_01_4_01_4/","title":"fmt::formatter&lt; std::optional&lt; plotpp::Color &gt; &gt;","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01std_1_1optional_3_01plotpp_1_1_color_01_4_01_4/#public-functions","title":"Public Functions","text":"Name auto parse(format_parse_context &amp; ctx) template &lt;typename FormatContext &gt; auto format(const std::optional&lt; plotpp::Color &gt; &amp; color, FormatContext &amp; ctx) const"},{"location":"API/Classes/structfmt_1_1formatter_3_01std_1_1optional_3_01plotpp_1_1_color_01_4_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structfmt_1_1formatter_3_01std_1_1optional_3_01plotpp_1_1_color_01_4_01_4/#function-parse","title":"function parse","text":"<pre><code>inline auto parse(\n    format_parse_context &amp; ctx\n)\n</code></pre>"},{"location":"API/Classes/structfmt_1_1formatter_3_01std_1_1optional_3_01plotpp_1_1_color_01_4_01_4/#function-format","title":"function format","text":"<pre><code>template &lt;typename FormatContext &gt;\ninline auto format(\n    const std::optional&lt; plotpp::Color &gt; &amp; color,\n    FormatContext &amp; ctx\n) const\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structplotpp_1_1_plot_title/","title":"plotpp::PlotTitle","text":""},{"location":"API/Classes/structplotpp_1_1_plot_title/#public-functions","title":"Public Functions","text":"Name PlotTitle(const PlotTitle &amp; ) =default PlotTitle(PlotTitle &amp;&amp; ) =default PlotTitle &amp; operator=(const PlotTitle &amp; ) =default PlotTitle &amp; operator=(PlotTitle &amp;&amp; ) =default template &lt;typename... Args&gt;  PlotTitle(Args &amp;&amp;... args) template &lt;typename Arg &gt; PlotTitle &amp; operator=(Arg &amp;&amp; args) bool empty() const"},{"location":"API/Classes/structplotpp_1_1_plot_title/#public-attributes","title":"Public Attributes","text":"Name std::string str"},{"location":"API/Classes/structplotpp_1_1_plot_title/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"API/Classes/structplotpp_1_1_plot_title/#function-plottitle","title":"function PlotTitle","text":"<pre><code>inline PlotTitle(\n    const PlotTitle &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/structplotpp_1_1_plot_title/#function-plottitle_1","title":"function PlotTitle","text":"<pre><code>inline PlotTitle(\n    PlotTitle &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/structplotpp_1_1_plot_title/#function-operator","title":"function operator=","text":"<pre><code>inline PlotTitle &amp; operator=(\n    const PlotTitle &amp; \n) =default\n</code></pre>"},{"location":"API/Classes/structplotpp_1_1_plot_title/#function-operator_1","title":"function operator=","text":"<pre><code>inline PlotTitle &amp; operator=(\n    PlotTitle &amp;&amp; \n) =default\n</code></pre>"},{"location":"API/Classes/structplotpp_1_1_plot_title/#function-plottitle_2","title":"function PlotTitle","text":"<pre><code>template &lt;typename... Args&gt;\ninline PlotTitle(\n    Args &amp;&amp;... args\n)\n</code></pre>"},{"location":"API/Classes/structplotpp_1_1_plot_title/#function-operator_2","title":"function operator=","text":"<pre><code>template &lt;typename Arg &gt;\ninline PlotTitle &amp; operator=(\n    Arg &amp;&amp; args\n)\n</code></pre>"},{"location":"API/Classes/structplotpp_1_1_plot_title/#function-empty","title":"function empty","text":"<pre><code>inline bool empty() const\n</code></pre>"},{"location":"API/Classes/structplotpp_1_1_plot_title/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"API/Classes/structplotpp_1_1_plot_title/#variable-str","title":"variable str","text":"<pre><code>std::string str;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__ptr/","title":"remove_ptr","text":"<p>More...</p>"},{"location":"API/Classes/structremove__ptr/#public-types","title":"Public Types","text":"Name using std::remove_pointer_t&lt; T &gt; type"},{"location":"API/Classes/structremove__ptr/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_ptr;\n</code></pre>"},{"location":"API/Classes/structremove__ptr/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__ptr/#using-type","title":"using type","text":"<pre><code>using remove_ptr&lt; T &gt;::type =  std::remove_pointer_t&lt;T&gt;;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__ptr_3_01optional__ptr_3_01_t_01_4_01_4/","title":"remove_ptr&lt; optional_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using std::remove_pointer_t&lt; T &gt; type"},{"location":"API/Classes/structremove__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_ptr&lt; optional_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_ptr&lt; optional_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/","title":"remove_ptr&lt; std::shared_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using std::remove_pointer_t&lt; T &gt; type"},{"location":"API/Classes/structremove__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_ptr&lt; std::shared_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_ptr&lt; std::shared_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/","title":"remove_ptr&lt; std::unique_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using std::remove_pointer_t&lt; T &gt; type"},{"location":"API/Classes/structremove__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_ptr&lt; std::unique_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_ptr&lt; std::unique_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/","title":"remove_ptr&lt; std::weak_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using std::remove_pointer_t&lt; T &gt; type"},{"location":"API/Classes/structremove__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_ptr&lt; std::weak_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_ptr&lt; std::weak_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__smart__ptr/","title":"remove_smart_ptr","text":"<p>More...</p>"},{"location":"API/Classes/structremove__smart__ptr/#public-types","title":"Public Types","text":"Name using T type"},{"location":"API/Classes/structremove__smart__ptr/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_smart_ptr;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__smart__ptr/#using-type","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; T &gt;::type =  T;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01optional__ptr_3_01_t_01_4_01_4/","title":"remove_smart_ptr&lt; optional_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using T type"},{"location":"API/Classes/structremove__smart__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_smart_ptr&lt; optional_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__smart__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; optional_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01optional__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/","title":"remove_smart_ptr&lt; std::shared_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using T type"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_smart_ptr&lt; std::shared_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; std::shared_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/","title":"remove_smart_ptr&lt; std::unique_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using T type"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_smart_ptr&lt; std::unique_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; std::unique_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1unique__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/","title":"remove_smart_ptr&lt; std::weak_ptr&lt; T &gt; &gt;","text":"<p>More...</p>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#public-types","title":"Public Types","text":"Name using T type using T type"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#detailed-description","title":"Detailed Description","text":"<pre><code>template &lt;typename T &gt;\nstruct remove_smart_ptr&lt; std::weak_ptr&lt; T &gt; &gt;;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#using-type","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; std::weak_ptr&lt; T &gt; &gt;::type =  T;\n</code></pre>"},{"location":"API/Classes/structremove__smart__ptr_3_01std_1_1weak__ptr_3_01_t_01_4_01_4/#using-type_1","title":"using type","text":"<pre><code>using remove_smart_ptr&lt; T &gt;::type = ;\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/","title":"Examples","text":"<ul> <li>example arrows.cpp </li> <li>example bode.cpp </li> <li>example boxes.cpp </li> <li>example boxplot.cpp </li> <li>example circle.cpp </li> <li>example filledcurves.cpp </li> <li>example heatmap.cpp </li> <li>example impulses.cpp </li> <li>example line.cpp </li> <li>example multiplot.cpp </li> <li>example piechart.cpp </li> <li>example points.cpp </li> <li>example steps.cpp </li> <li>example xerror.cpp </li> <li>example xyerror.cpp </li> <li>example yerror.cpp </li> <li>example yerrorline.cpp </li> </ul> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/_y_error_line_8cpp-example/","title":"YErrorLine.cpp","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;plotpp.hpp&gt;\n\n#include \"functions.hpp\" //linspace, apply_func\n\nint main() {\n\n    std::vector&lt;float&gt; x = linspace&lt;float&gt;(-2, 2, 10);\n    std::vector&lt;double&gt; y = apply_func(x, [](double x){return -x + x * x * x;});\n    std::vector&lt;double&gt; err = apply_func(x, [](double x){return 1.0 + x * x / 2.;});\n\n    using namespace plotpp;\n\n    Figure fig(\"Line Plot from XY\");\n    fig.add(yerrorline(&amp;x, &amp;y, &amp;err).label(\"f1\"));\n    fig.grid();\n    fig.show();\n    fig.save(\"yerrorline-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: YErrorLine.cpp</p> <p>Updated on 2025-03-11 at 15:59:54 +0100</p>"},{"location":"API/Examples/arrows_8cpp-example/","title":"arrows.cpp","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;plotpp.hpp&gt;\n\n\nint main() {\n    using namespace plotpp;\n\n    double arrow_x1[] = {-1, -2, -3, -4, -5};\n    double arrow_y1[] = {-1, -2, -1, -2, -3};\n    double arrow_x2[] = {-2, -3, -4, -5, -6};\n    double arrow_y2[] = {-3, -4, -2, -3, -5};\n\n    Figure(\"Arrow-Plot\")\n        .add(arrows(&amp;arrow_x1, &amp;arrow_y1, &amp;arrow_x2, &amp;arrow_y2).label(\"arrow plot\"))\n        .show()\n        .save(\"arrows-plot.svg\");\n    /*\n    Figure(\"Vector-Plot\")\n        .add(vector(&amp;arrow_x1, &amp;arrow_y1, &amp;arrow_x2, &amp;arrow_y2).label(\"vector plot\"));\n        .show();\n        .save(\"vector-plot.svg\");\n\n    Figure(\"Quiver-Plot\")\n        .add(quiver(&amp;arrow_x1, &amp;arrow_y1, &amp;arrow_x2, &amp;arrow_y2).label(\"quiver plot\"));\n        .show();\n        .save(\"quiver-plot.svg\");\n    */\n\n    return 0;\n}\n</code></pre> <p>Filename: arrows.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/bode_8cpp-example/","title":"bode.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n#include &lt;valarray&gt;\n\n\nint main(){\n    using namespace plotpp;\n\n    std::valarray&lt;double&gt; magnitudes{1.02544, 1.03233, 1.04474, 1.06217, 1.08696, 1.12274, 1.17554, 1.25606, 1.38506, 1.52648, 1.73105, 2.00318, 2.36546, 2.84452, 3.45721, 4.16329, 4.78114, 5.02519, 4.7485, 3.95567, 3.00198, 2.18775, 1.57679, 1.1338, 0.812663, 0.638681, 0.577917, 0.396094, 0.262676, 0.179776, 0.125561, 0.088894, 0.0635239, 0.045691, 0.0330162, 0.0239361, 0.0173944, 0.0126622, 0.00922881, 0.00673246, 0.00491459, 0.00396317};\n\n    std::valarray&lt;double&gt; mag_dB = 20 * std::log10(magnitudes);\n\n    std::valarray&lt;double&gt; phases{-1.87051, -2.11605, -2.50443, -2.97793, -3.56431, -4.30654, -5.27535, -6.59671, -8.51898, -10.4932, -13.2407, -16.8283, -21.6288, -28.2053, -37.3562, -49.9633, -66.2047, -84.2318, -103.431, -122.522, -137.895, -148.926, -156.63, -162.09, -166.068, -168.27, -169.054, -171.481, -173.403, -174.725, -175.693, -176.436, -177.022, -177.496, -177.884, -178.206, -178.476, -178.702, -178.894, -179.057, -179.195, -179.277};\n\n    std::valarray&lt;double&gt; frequencies{100, 112.366, 131.399, 153.656, 179.684, 210.12, 245.712, 287.333, 336.004, 374.813, 415.676, 454.032, 489.53, 521.993, 551.376, 577.742, 601.223, 622.004, 643.502, 669.657, 701.678, 741.176, 790.326, 852.118, 930.744, 1000, 1032.22, 1174.94, 1373.96, 1606.69, 1878.85, 2197.1, 2569.27, 3004.47, 3513.39, 4108.52, 4804.46, 5618.28, 6569.95, 7682.82, 8984.2, 10000};\n\n    auto mfig = bode(&amp;frequencies, &amp;mag_dB, &amp;phases);\n    mfig.show().save(\"bode-plot.svg\");\n}\n</code></pre> <p>Filename: bode.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/boxes_8cpp-example/","title":"boxes.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n\nint main() {\n    using namespace plotpp;\n\n    int xdata[] = {0, 1, 2, 3, 4, 5, 6};\n    float ydata[] = {1.0, 5.5, 7.8, 9.0, 6.0};\n\n    float y2data[] = {1.0, 4.5, 7.8, 9.0, 2.0};\n    int x2data[] = {3, 4, 5, 7, 8};\n\n    Figure fig(\"Boxes\");\n    fig.add(boxes(&amp;xdata, &amp;ydata).label(\"boxes1\"));\n    fig.add(boxes(&amp;x2data, &amp;y2data).label(\"boxes2\").relativeBoxWidth(false));\n    fig.show();\n    fig.save(\"boxes-plot.svg\");\n\n\n    Figure fig2(\"Boxes with text\");\n    fig2.ylim(0, 10);\n    fig2.xtics({\"house\", \"bottel\", \"basket\", \"number\", \"apple\"});\n    fig2.add(boxes(&amp;ydata).label(\"boxes with names\"));\n    fig2.show();\n    fig2.save(\"boxes-with-named-xtics-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: boxes.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/boxplot_8cpp-example/","title":"boxplot.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n#include &lt;iostream&gt;\n\nint main(){\n    using namespace plotpp;\n\n    int data1[] = {8, 10, 10, 12, 9, 11};\n    int data2[] = {9, 12, 11, 10, 13, 14};\n    int data3[] = {11, 14, 12, 10, 15, 12};\n\n    auto fig = Figure(\"Boxplots\");\n    fig.add(boxplot(&amp;data1));\n    fig.add(boxplot(2, &amp;data2));\n    fig.add(boxplot(3, &amp;data3));\n    fig.show();\n    fig.save(\"boxplot-plot.svg\");\n\n    return 0;\n\n}\n</code></pre> <p>Filename: boxplot.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/circle_8cpp-example/","title":"circle.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n\nint main(){\n    using namespace plotpp;\n\n    Figure fig(\"Circle\");\n    fig.add(circle(0, 0));\n    fig.add(circle(4, 0, 1.8).label(\"circle 2\").color(color_map::reds[3]));\n    fig.add(circle(5, 6, 1.8, 30).label(\"circle 3\").lineType(LineType::dashed));\n    fig.add(circle(0, 4, 1.8, 100, 160).label(\"circle 4\").fillSolid(0.8));\n    fig.add(circle(2, 2, 1.8).label(\"circle 4\").fillPattern(2));\n    fig.ylim(-4, 10);\n    fig.xlim(-3, 8);\n    fig.show();\n    fig.save(\"circle-plot.svg\");\n\n}\n</code></pre> <p>Filename: circle.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/filledcurves_8cpp-example/","title":"filledcurves.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n\nint main(){\n    using namespace plotpp;\n\n    float x[] = {-1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,\n                  0.0,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1.0};\n    float sin[] = {-0.8415, -0.7833, -0.7174, -0.6442, -0.5646, -0.4794, -0.3894, -0.2955, -0.1987, -0.0998,\n                    0.0000,  0.0998,  0.1987,  0.2955,  0.3894,  0.4794,  0.5646,  0.6442,  0.7174,  0.7833,  0.8415};\n    float tan[] = {-1.5574, -1.2602, -1.0296, -0.8423, -0.6841, -0.5463, -0.4228, -0.3093, -0.2027, -0.1003,\n                    0.0000,  0.1003,  0.2027,  0.3093,  0.4228,  0.5463,  0.6841,  0.8423,  1.0296,  1.2602,  1.5574};\n\n    Figure(\"filled curves sin-tan\")\n        .add(filledcurves(&amp;x, &amp;sin, &amp;tan).color(0xf00000).label(\"sin-tan\"))\n        .add(line(&amp;x, &amp;sin).label(\"sin\").lineWidth(2))\n        .add(line(&amp;x, &amp;tan).label(\"tan\").lineWidth(2))\n        .grid()\n        .show()\n        .save(\"filledcurves-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: filledcurves.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/heatmap_8cpp-example/","title":"heatmap.cpp","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;plotpp.hpp&gt;\n#include &lt;cmath&gt;\n\ndouble sinc(double x){\n    if(x == 0.0){\n        return 1.0;\n    }else{\n        return std::sin(x)/x;\n    }\n}\n\nint main() {\n    using namespace plotpp;\n\n    // construct heatmap from 2D array (alternatively matrix-types work too)\n    const size_t rows = 16;\n    const size_t columns = 25;\n    double array[rows][columns] = {};\n\n    for(size_t r = 0; r &lt; rows; r++){\n        for(size_t c = 0; c &lt; columns; c++){\n            double x = r + 0.5 - rows/2;\n            double y = c + 0.5 - columns/2;\n            array[r][c] = sinc(std::sqrt(x*x + y*y));\n        }\n    }\n\n    Figure fig(\"Heatmap\");\n    fig.add(heatmap(&amp;array));\n    fig.ylim(0, rows-1);\n    fig.xlim(0, columns-1);\n    fig.show();\n    fig.save(\"headmap-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: heatmap.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/impulses_8cpp-example/","title":"impulses.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n#include &lt;cmath&gt;\n#include \"functions.hpp\"\n\nint main(){\n    using namespace plotpp;\n\n    auto x = linspace&lt;float&gt;(-5, 5, 50);\n    auto y = sin(x);\n\n    Figure(\"Impulses\")\n        .add(impulses(std::move(x), std::move(y)))\n        .show().save(\"impulses-plot.svg\");\n}\n</code></pre> <p>Filename: impulses.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/line_8cpp-example/","title":"line.cpp","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;plotpp.hpp&gt;\n\n#include \"functions.hpp\" //linspace, apply_func\n\nint main() {\n\n    std::vector&lt;float&gt; x = linspace&lt;float&gt;(-2, 2, 100);\n    std::vector&lt;double&gt; y = apply_func(x, [](double x){return -x + x * x * x;});\n\n    using namespace plotpp;\n\n    Figure fig(\"Line Plot from XY\");\n    fig.add(line(&amp;x, std::move(y)).label(\"f1\"));\n    fig.grid();\n    fig.show();\n    fig.save(\"line-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: line.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/multiplot_8cpp-example/","title":"multiplot.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n#include &lt;vector&gt;\n#include &lt;cmath&gt;\n\nstd::vector&lt;float&gt; linspace(float from, float to, size_t N){\n    std::vector&lt;float&gt; result;\n    result.reserve(N);\n    for (size_t i = 0; i &lt; N; ++i) result.emplace_back(((to - from) * i) / N + from);\n    return result;\n}\n\n\nstd::vector&lt;float&gt; apply(const std::vector&lt;float&gt;&amp; x_range, float (*func)(float x)){\n    std::vector&lt;float&gt; result;\n    result.reserve(x_range.size());\n    for(const float x : x_range){\n        const float y = func(x);\n        result.emplace_back(y);\n    }\n    return result;\n}\n\nstd::vector&lt;float&gt; sin(const std::vector&lt;float&gt;&amp; x) {return apply(x, std::sin);}\nstd::vector&lt;float&gt; cos(const std::vector&lt;float&gt;&amp; x) {return apply(x, std::cos);}\nstd::vector&lt;float&gt; tan(const std::vector&lt;float&gt;&amp; x) {return apply(x, std::sinh);}\n\nint main(){\n    using namespace plotpp;\n\n    const auto x = linspace(-3.1415, 3.1415, 50);\n\n    /*\n    The plotting devices are crafted in a way to avoid unnecessary copies. \n    Data is taken by reference/pointers and optionally owned.\n\n        pass by:\n            * lvalue reference  --&gt; plot will store a pointer to the data\n            * rvalue reference  --&gt; plot will move the data into a smart_pointer that holds the data\n            * shared_ptr        --&gt; plot will take the smart_pointer\n            * unique_ptr        --&gt; plot will move the unique_ptr\n            * raw_ptr           --&gt; plot will store a pointer to the data\n    */\n    Multiplot mplt(2, 2, \"Multiplot\");\n    mplt.at(0, 0).add(line(&amp;x, sin(x)).label(\"Top-Left\"));\n    mplt.at(0, 1).add(\n        points(\n            std::make_shared&lt;std::vector&lt;float&gt;&gt;(x), \n            std::make_unique&lt;std::vector&lt;float&gt;&gt;(cos(x))\n        ).label(\"Top-Right\")\n    );\n    mplt.at(1, 1).add(line(&amp;x, tan(x)).label(\"Bottom-Right\"));\n    mplt.show();\n    mplt.save(\"multiplot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: multiplot.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/piechart_8cpp-example/","title":"piechart.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n#include &lt;string&gt;\nint main(){\n    using namespace plotpp;\n\n    std::string names[] = {\"one\", \"two\", \"tree\", \"four\"};\n    const std::vector&lt;int&gt; values = {1, 2, 4, 8};\n\n    Figure(\"Pie Chart\")\n        .add(piechart(&amp;names, &amp;values))\n        .lim(-2, 2, -2, 2)\n        .show()\n        .save(\"piechart-plot.svg\");\n\n    return 0;\n\n}\n</code></pre> <p>Filename: piechart.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/points_8cpp-example/","title":"points.cpp","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;plotpp.hpp&gt;\n\n#include \"functions.hpp\" //linspace, apply_func\n\nint main() {\n\n    /* Plotting values from different container types */\n    std::vector&lt;float&gt; x = linspace&lt;float&gt;(-2, 2, 50);\n    std::list&lt;double&gt; y;\n    for(const auto&amp; xi : x) y.emplace_back(-xi + xi* xi * xi);\n\n    using namespace plotpp;\n\n    /* Plotting points */\n    Figure(\"Point Plot from Y\")\n        .add(points(&amp;y).label(\"f1\").color(Color(0.8, 0.2, 0.2)))\n        .grid().show().save(\"point-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: points.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/steps_8cpp-example/","title":"steps.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n\nint main(){\n    using namespace plotpp;\n\n    std::vector&lt;int&gt; randomInts = {42, 7, 19, 73, 88, 12, 5, 99};\n    std::vector&lt;float&gt; randomFloats = {31.4f, 27.1f, 16.1f, 46.7f, 58.9f, 72.3f, 58.9f, 16.1f};\n\n    Figure(\"steps\")\n        .add(steps(std::move(randomInts)).lineWidth(1.5))\n        .add(steps(std::move(randomFloats)).lineWidth(2.5).color(0.5, 0.5, 0.1).fill())\n        .show()\n        .save(\"steps-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: steps.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/xerror_8cpp-example/","title":"xerror.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n\n#include &lt;list&gt;\n#include &lt;vector&gt;\n#include &lt;array&gt;\n\nint main(){\n    using namespace plotpp;\n\n    // data in different containers and datatypes\n    std::list&lt;int&gt; x({1, 2, 3, 4, 5, 6});\n    std::vector&lt;float&gt; y({1.1f, 5.5f, 7.7f, 9.9f, 12.1f, 14.3f});\n    std::array&lt;double, 6&gt; err({1.1, 0.5, 0.9, 0.7, 0.1, 1.3});\n\n    // plot from different containers, datatypes, and variable-passing (move or reference)\n    Figure fig(\"XError\");\n    fig.add(xerror(&amp;x, std::move(y), &amp;err).color(Color(0.5, 0.5, 0.0)));\n    fig.show();\n    fig.save(\"xerror-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: xerror.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/xyerror_8cpp-example/","title":"xyerror.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n\n#include &lt;list&gt;\n#include &lt;vector&gt;\n#include &lt;array&gt;\n\nint main(){\n    using namespace plotpp;\n\n    std::list&lt;int&gt; x({1, 2, 3, 4, 5, 6});\n    std::vector&lt;float&gt; y({1.1f, 5.5f, 7.7f, 9.9f, 12.1f, 14.3f});\n    std::array&lt;double, 6&gt; err({0.1f, 0.5f, 0.7f, 0.9f, 0.1f, 0.43f});\n\n    Figure fig(\"YError\");\n    fig.add(xyerror(&amp;x, std::move(y), &amp;err, &amp;err));\n    fig.show();\n    fig.save(\"xyerror-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: xyerror.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/yerror_8cpp-example/","title":"yerror.cpp","text":"<pre><code>#include &lt;plotpp.hpp&gt;\n\n#include &lt;list&gt;\n#include &lt;vector&gt;\n#include &lt;array&gt;\n\nint main(){\n    using namespace plotpp;\n\n    std::list&lt;int&gt; x({1, 2, 3, 4, 5, 6});\n    std::vector&lt;float&gt; y({1.1f, 5.5f, 7.7f, 9.9f, 12.1f, 14.3f});\n    std::array&lt;double, 6&gt; err({1., 5./2., 7./2., 9./2., 11./2., 3./2.});\n\n    Figure fig(\"YError\");\n    fig.add(yerror(&amp;x, std::move(y), &amp;err));\n    fig.show();\n    fig.save(\"yerror-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: yerror.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Examples/yerrorline_8cpp-example/","title":"yerrorline.cpp","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;plotpp.hpp&gt;\n\n#include \"functions.hpp\" //linspace, apply_func\n\nint main() {\n\n    std::vector&lt;float&gt; x = linspace&lt;float&gt;(-2, 2, 10);\n    std::vector&lt;double&gt; y = apply_func(x, [](double x){return -x + x * x * x;});\n    std::vector&lt;double&gt; err = apply_func(x, [](double x){return 1.0 + x * x / 2.;});\n\n    using namespace plotpp;\n\n    Figure fig(\"Line Plot from XY\");\n    fig.add(yerrorline(&amp;x, &amp;y, &amp;err).label(\"f1\"));\n    fig.grid();\n    fig.show();\n    fig.save(\"yerrorline-plot.svg\");\n\n    return 0;\n}\n</code></pre> <p>Filename: yerrorline.cpp</p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Namespaces/","title":"Namespaces","text":"<ul> <li>namespace fmt </li> <li>namespace plotpp The libraries main-namespace. <ul> <li>namespace color_map </li> </ul> </li> </ul> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Namespaces/namespacefmt/","title":"fmt","text":""},{"location":"API/Namespaces/namespacefmt/#classes","title":"Classes","text":"Name struct fmt::formatter&lt; plotpp::ArrowHeadStyle &gt; formats plotpp::ArrowHeadStyle for {fmt} strings. struct fmt::formatter&lt; plotpp::Color &gt; struct fmt::formatter&lt; plotpp::FillStyle &gt; struct fmt::formatter&lt; plotpp::LineType &gt; struct fmt::formatter&lt; plotpp::PlotTitle &gt; struct fmt::formatter&lt; plotpp::PointType &gt; struct fmt::formatter&lt; plotpp::Text &gt; struct fmt::formatter&lt; std::optional&lt; plotpp::Color &gt; &gt; <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Namespaces/namespaceplotpp/","title":"plotpp","text":"<p>The libraries main-namespace. </p>"},{"location":"API/Namespaces/namespaceplotpp/#namespaces","title":"Namespaces","text":"Name plotpp::color_map"},{"location":"API/Namespaces/namespaceplotpp/#classes","title":"Classes","text":"Name class plotpp::Arrows class for plotting arrows/vectors/quivers in plotpp::Figure class plotpp::Boxes class for plotting boxes into a plotpp::Figure class plotpp::Boxplot class plotpp::Circle class plotpp::Color class plotpp::Figure class plotpp::Filledcurves class plotpp::FillStyle class plotpp::Heatmap class plotpp::Impulses class plotpp::IPlot class plotpp::Line Represents a line plot from x- and y-coordiantes. class plotpp::Multiplot class plotpp::Piechart struct plotpp::PlotTitle class plotpp::Points Represents a point plot from x- and y-coordiantes. class plotpp::Steps class plotpp::Text class plotpp::XError class plotpp::XYError class plotpp::YError class plotpp::YErrorLine Represents a YErrorLine plot from x- and y-coordiantes."},{"location":"API/Namespaces/namespaceplotpp/#types","title":"Types","text":"Name enum class ArrowHeadStyle { nohead, head, filled_head, empty_head, backhead, filled_backhead, empty_backhead}Enum for the differnt arrow head styles used for vectors, quivers and the like. enum class DataRelation enum class ImageFileType enum class LineType enum class OutputFileType enum class int PointType enum class TerminalType"},{"location":"API/Namespaces/namespaceplotpp/#functions","title":"Functions","text":"Name const char * to_command(ArrowHeadStyle ahs)turns the enum plotpp::ArrowHeadStyle into its corresponding gnuplot command. template &lt;PtrOrMoved U1,PtrOrMoved U2,PtrOrMoved U3,PtrOrMoved U4&gt; auto arrows(U1 &amp;&amp; x1, U2 &amp;&amp; y1, U3 &amp;&amp; x2, U4 &amp;&amp; y2)helper constructor function to construct an arrows, where all coordinates are absolute to the graphs origin. template &lt;PtrOrMoved U1,PtrOrMoved U2,PtrOrMoved U3,PtrOrMoved U4&gt; auto vector(U1 &amp;&amp; x1, U2 &amp;&amp; y1, U3 &amp;&amp; x2, U4 &amp;&amp; y2)helper constructor function to construct vectors, where all coordinates are absolute to the graphs origin. template &lt;PtrOrMoved U1,PtrOrMoved U2,PtrOrMoved U3,PtrOrMoved U4&gt; auto quiver(U1 &amp;&amp; x, U2 &amp;&amp; y, U3 &amp;&amp; u, U4 &amp;&amp; v)helper constructor function to construct quivers (arrows), [x, y] are absolute starting positions and [u, v] are relative to the start of the arrow [x, y]. template &lt;PtrOrMoved Uf,PtrOrMoved Uamp,PtrOrMoved Uphi&gt; Multiplot bode(Uf &amp;&amp; frequencies, Uamp &amp;&amp; amplitudes, Uphi &amp;&amp; phases, std::string title =\"Bode Diagram\", std::string freqLabel =\"Frequency in Hz\", std::string ampLabel =\"Amplitude in dB\", std::string phaseLabel =\"Phase in deg\")Creates a bode plotpp. template &lt;PtrOrMoved U1,PtrOrMoved U2&gt; auto boxes(U1 &amp;&amp; x, U2 &amp;&amp; y) template &lt;PtrOrMoved U2&gt; auto boxes(U2 &amp;&amp; y) template &lt;PtrOrMoved U1,PtrOrMoved U2&gt; auto boxplot(const U1 &amp; x_scalar, U2 &amp;&amp; y_range) template &lt;PtrOrMoved U2&gt; auto boxplot(U2 &amp;&amp; y_range) Circle circle(float x, float y, float radius =1.0f, float startAngle =0.0f, float endAngle =360.0f) Color operator+(const Color &amp; l, const Color &amp; r) Color operator-(const Color &amp; l, const Color &amp; r) Color operator*(const Color &amp; l, const Color &amp; r) Color operator*(const Color &amp; l, const float &amp; r) Color operator*(const float &amp; l, const Color &amp; r) Color blend(const Color &amp; a, const Color &amp; b, const float &amp; t) template &lt;size_t N&gt; Color map(const float &amp; v, const std::array&lt; Color, N &gt; &amp; color_map) template &lt;PtrOrMoved U1,PtrOrMoved U2,PtrOrMoved U3&gt; auto filledcurves(U1 &amp;&amp; x, U2 &amp;&amp; y1, U3 &amp;&amp; y2) template &lt;PtrOrMoved U2,PtrOrMoved U3&gt; auto filledcurves(U2 &amp;&amp; y1, U3 &amp;&amp; y2) template &lt;PtrOrMoved U1&gt; auto heatmap(U1 &amp;&amp; matrix, size_t rows, size_t columns, std::function&lt; double(const remove_ptr_t&lt; std::remove_reference_t&lt; U1 &gt; &gt; &amp;, size_t, size_t)&gt; at, Text title =\"\") template &lt;MatrixLike U1&gt; auto heatmap(U1 &amp;&amp; matrix) template &lt;MatrixLike U1&gt; auto heatmap(U1 * matrix) template &lt;class T ,size_t ROWS,size_t COLS&gt; auto heatmap(const T(*) array[ROWS][COLS]) std::string_view to_string(ImageFileType filetype) ImageFileType image_filetype_from_filename(std::string_view filename) template &lt;PtrOrMoved U1,PtrOrMoved U2&gt; auto impulses(U1 &amp;&amp; x, U2 &amp;&amp; y) template &lt;PtrOrMoved U2&gt; auto impulses(U2 &amp;&amp; y) template &lt;PtrOrMoved Ux,PtrOrMoved Uy&gt; auto line(Ux &amp;&amp; x, Uy &amp;&amp; y)Construction helper function to create a Line instance with x- and y-coordinate ranges. template &lt;PtrOrMoved Uy&gt; auto line(Uy &amp;&amp; y)Construction helper function to create a Line instance with x and y coordinate ranges. std::string_view to_command(LineType dt) std::string_view to_file_ending(OutputFileType t) TerminalType to_terminal(OutputFileType t) OutputFileType filetype_from_filename(std::string_view filename) template &lt;PtrOrMoved U1,class U2 &gt; auto piechart(U1 &amp;&amp; names, const U2 &amp; values) template &lt;PtrOrMoved U1,class U2 &gt; auto piechart(U1 &amp;&amp; names, const U2 * values) template &lt;PtrOrMoved U2&gt; auto piechart(const U2 &amp; values) template &lt;PtrOrMoved U2&gt; auto piechart(const U2 * values) template &lt;PtrOrMoved U1,PtrOrMoved U2&gt; auto points(U1 &amp;&amp; x, U2 &amp;&amp; y)Construction helper function to create a Plot instance with x- and y-coordinate ranges. template &lt;PtrOrMoved U1,PtrOrMoved U2&gt; auto scatter(U1 &amp;&amp; x, U2 &amp;&amp; y)Construction helper function to create a Plot instance with x- and y-coordinate ranges. template &lt;PtrOrMoved U2&gt; auto points(U2 &amp;&amp; y)Construction helper function to create a Plot instance with x- and y-coordinate ranges. template &lt;PtrOrMoved U1,PtrOrMoved U2&gt; auto scatter(U2 &amp;&amp; y)Construction helper function to create a Plot instance with x- and y-coordinate ranges. template &lt;PtrOrMoved U1,PtrOrMoved U2&gt; auto steps(U1 &amp;&amp; x, U2 &amp;&amp; y) template &lt;PtrOrMoved U2&gt; auto steps(U2 &amp;&amp; y) std::string_view to_command(TerminalType t) std::ostream &amp; operator&lt;&lt;(std::ostream &amp; stream, const Text &amp; text) template &lt;PtrOrMoved U1,PtrOrMoved U2,PtrOrMoved U3&gt; auto xerror(U1 &amp;&amp; x, U2 &amp;&amp; y, U3 &amp;&amp; xerr) template &lt;PtrOrMoved U1,PtrOrMoved U2,PtrOrMoved U3,PtrOrMoved U4&gt; auto xyerror(U1 &amp;&amp; x, U2 &amp;&amp; y, U3 &amp;&amp; xerr, U4 &amp;&amp; yerr) template &lt;PtrOrMoved U1,PtrOrMoved U2,PtrOrMoved U3&gt; auto yerror(U1 &amp;&amp; x, U2 &amp;&amp; y, U3 &amp;&amp; yerr) template &lt;PtrOrMoved Ux,PtrOrMoved Uy,PtrOrMoved Uerr&gt; auto yerrorline(Ux &amp;&amp; x, Uy &amp;&amp; y, Uerr &amp;&amp; err)Construction helper function to create a YErrorLine instance with x- and y-coordinate ranges. template &lt;PtrOrMoved Uy,PtrOrMoved Uerr&gt; auto yerrorline(Uy &amp;&amp; y, Uerr &amp;&amp; err)Construction helper function to create a YErrorLine instance with x and y coordinate ranges."},{"location":"API/Namespaces/namespaceplotpp/#types-documentation","title":"Types Documentation","text":""},{"location":"API/Namespaces/namespaceplotpp/#enum-arrowheadstyle","title":"enum ArrowHeadStyle","text":"Enumerator Value Description nohead head filled_head empty_head backhead filled_backhead empty_backhead <p>Enum for the differnt arrow head styles used for vectors, quivers and the like. </p> <p>See: to_command(ArrowHeadStyle)</p>"},{"location":"API/Namespaces/namespaceplotpp/#enum-datarelation","title":"enum DataRelation","text":"Enumerator Value Description absolute relative polar"},{"location":"API/Namespaces/namespaceplotpp/#enum-imagefiletype","title":"enum ImageFileType","text":"Enumerator Value Description NONE png jpeg webp gif"},{"location":"API/Namespaces/namespaceplotpp/#enum-linetype","title":"enum LineType","text":"Enumerator Value Description none -1 solid 1 dashed 2 doted 3 dash_doted 4 dash_doted2 5"},{"location":"API/Namespaces/namespaceplotpp/#enum-outputfiletype","title":"enum OutputFileType","text":"Enumerator Value Description NONE tex cgm pdf dxf emf eps fig gif jpeg png svg webp html txt gp"},{"location":"API/Namespaces/namespaceplotpp/#enum-pointtype","title":"enum PointType","text":"Enumerator Value Description None -1 SmallDot 0 Plus 1 X 2 PlusX 3 Square 4 SquareFilled 5 Circle 6 CircleFilled 7 TriangleUp 8 TriangleUpFilled 9 TriangleDown 10 TriangleDownFilled 11 Rhombus 12 RhombusFilled 13 Heptagon 14 HeptagonFilled 15"},{"location":"API/Namespaces/namespaceplotpp/#enum-terminaltype","title":"enum TerminalType","text":"Enumerator Value Description NONE cairolatex canvas cgm context domterm dumb txt dxf emf epscairo epslatex fig gif hpgl jpeg kittycairo kittygd lua pcl5 pdfcairo pict2e png pngcairo postscript pslatex pstex pstricks qt sixelgd svg texdraw tikz tkcanvas unknown webp windows wxt"},{"location":"API/Namespaces/namespaceplotpp/#functions-documentation","title":"Functions Documentation","text":""},{"location":"API/Namespaces/namespaceplotpp/#function-to_command","title":"function to_command","text":"<pre><code>const char * to_command(\n    ArrowHeadStyle ahs\n)\n</code></pre> <p>turns the enum plotpp::ArrowHeadStyle into its corresponding gnuplot command. </p> <p>Return: a c-string with the command </p>"},{"location":"API/Namespaces/namespaceplotpp/#function-arrows","title":"function arrows","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2,\nPtrOrMoved U3,\nPtrOrMoved U4&gt;\ninline auto arrows(\n    U1 &amp;&amp; x1,\n    U2 &amp;&amp; y1,\n    U3 &amp;&amp; x2,\n    U4 &amp;&amp; y2\n)\n</code></pre> <p>helper constructor function to construct an arrows, where all coordinates are absolute to the graphs origin. </p> <p>Parameters: </p> <ul> <li>x1y1 The start coordinates of the Arrow </li> <li>x2y2 The end coordinates of the Arrow (absolute to the graphs origin)</li> </ul> <p>Template Parameters: </p> <ul> <li> <p>U1U2U3U4 Can either be:</p> </li> <li> <p>a pointer to data (The Arrow will not own the data, aka. not deconstruct it) or</p> </li> <li>data that is moved (The Arrow will own the data, aka. destruct it) Further the datatype has to be a forward range because of the constructor Arrows::Arrows</li> </ul> <p>Return: an Arrow class for plotting </p> <p>Function that constructs an Arrow. This will automatically derive correct types from the data-ranges and converts them into an optional_ptr that may or may not be the owner of the data.</p>"},{"location":"API/Namespaces/namespaceplotpp/#function-vector","title":"function vector","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2,\nPtrOrMoved U3,\nPtrOrMoved U4&gt;\ninline auto vector(\n    U1 &amp;&amp; x1,\n    U2 &amp;&amp; y1,\n    U3 &amp;&amp; x2,\n    U4 &amp;&amp; y2\n)\n</code></pre> <p>helper constructor function to construct vectors, where all coordinates are absolute to the graphs origin. </p> <p>Parameters: </p> <ul> <li>x1y1 The start coordinates of the Arrow </li> <li>x2y2 The end coordinates of the Arrow (absolute to the graphs origin)</li> </ul> <p>Template Parameters: </p> <ul> <li> <p>U1U2U3U4 Can either be:</p> </li> <li> <p>a pointer to data (The Arrow will not own the data, aka. not deconstruct it) or</p> </li> <li>data that is moved (The Arrow will own the data, aka. destruct it) Further the datatype has to be a forward range because of the constructor Arrows::Arrows</li> </ul> <p>Return: an Arrow class for plotting </p> <p>Alias of arrows(U1&amp;&amp; x1, U2&amp;&amp; y1, U3&amp;&amp; x2, U4&amp;&amp; y2). Function that constructs vectors where all coordinates are absolute to the graphs origin. This will automatically derive correct types from the data-ranges and converts them into an optional_ptr that may or may not be the owner of the data.</p>"},{"location":"API/Namespaces/namespaceplotpp/#function-quiver","title":"function quiver","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2,\nPtrOrMoved U3,\nPtrOrMoved U4&gt;\ninline auto quiver(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y,\n    U3 &amp;&amp; u,\n    U4 &amp;&amp; v\n)\n</code></pre> <p>helper constructor function to construct quivers (arrows), [x, y] are absolute starting positions and [u, v] are relative to the start of the arrow [x, y]. </p> <p>Parameters: </p> <ul> <li>xy The start coordinates of the Arrow </li> <li>uv The end coordinates of the Arrow (relative to the arrows start [x, y])</li> </ul> <p>Template Parameters: </p> <ul> <li> <p>U1U2U3U4 Can either be:</p> </li> <li> <p>a pointer to data (The Arrow will not own the data, aka. not deconstruct it) or</p> </li> <li>data that is moved (The Arrow will own the data, aka. destruct it) Further the datatype has to be a forward range because of the constructor Arrows::Arrows</li> </ul> <p>Return: an Arrow class for plotting </p> <p>equivalent of calling <code>arrows(x, y, u, v).dataRelation(DataRelation::relative)</code>. Function that constructs vectors where all [u, v] are relative to the arrows start [x, y]. This will automatically derive correct types from the data-ranges and converts them into an optional_ptr that may or may not be the owner of the data.</p>"},{"location":"API/Namespaces/namespaceplotpp/#function-bode","title":"function bode","text":"<pre><code>template &lt;PtrOrMoved Uf,\nPtrOrMoved Uamp,\nPtrOrMoved Uphi&gt;\nMultiplot bode(\n    Uf &amp;&amp; frequencies,\n    Uamp &amp;&amp; amplitudes,\n    Uphi &amp;&amp; phases,\n    std::string title =\"Bode Diagram\",\n    std::string freqLabel =\"Frequency in Hz\",\n    std::string ampLabel =\"Amplitude in dB\",\n    std::string phaseLabel =\"Phase in deg\"\n)\n</code></pre> <p>Creates a bode plotpp. </p> <p>Parameters: </p> <ul> <li>frequencies : [PtrOrMoved] - The frequency values as a container with <code>begin()</code> and <code>end()</code> iterators that is either a pointer (raw or smart) or the moved container itself. </li> <li>amplitudes : [PtrOrMoved] - The amplitudes values as a container with <code>begin()</code> and <code>end()</code> iterators that is either a pointer (raw or smart) or the moved container itself. </li> <li>phases : [PtrOrMoved] - The phases values as a container with <code>begin()</code> and <code>end()</code> iterators that is either a pointer (raw or smart) or the moved container itself.</li> <li>title : std::string - The title of the bode plot - Multiplot (default: \"Bode Diagram\") </li> <li>freqLabel : std::string - The label of the frequency-axis (default: \"Frequency in Hz\") </li> <li>ampLabel : std::string - The label of the ampLabel-axis (default: \"Frequency in Hz\") </li> <li>phaseLabel : std::string - The label of the phaseLabel-axis (default: \"Frequency in Hz\")</li> </ul> <p>Return: Multiplot - The generated bode plot. </p> <p>Creates a multiplot with two plots on top of each other. The top one will show the amplitued and the bottom will show the phase over the frequency. The freqency axis will be formated to be in log-scale.</p>"},{"location":"API/Namespaces/namespaceplotpp/#function-boxes","title":"function boxes","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2&gt;\ninline auto boxes(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-boxes_1","title":"function boxes","text":"<pre><code>template &lt;PtrOrMoved U2&gt;\ninline auto boxes(\n    U2 &amp;&amp; y\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-boxplot","title":"function boxplot","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2&gt;\nauto boxplot(\n    const U1 &amp; x_scalar,\n    U2 &amp;&amp; y_range\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-boxplot_1","title":"function boxplot","text":"<pre><code>template &lt;PtrOrMoved U2&gt;\nauto boxplot(\n    U2 &amp;&amp; y_range\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-circle","title":"function circle","text":"<pre><code>inline Circle circle(\n    float x,\n    float y,\n    float radius =1.0f,\n    float startAngle =0.0f,\n    float endAngle =360.0f\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-operator","title":"function operator+","text":"<pre><code>Color operator+(\n    const Color &amp; l,\n    const Color &amp; r\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-operator-","title":"function operator-","text":"<pre><code>Color operator-(\n    const Color &amp; l,\n    const Color &amp; r\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-operator_1","title":"function operator*","text":"<pre><code>Color operator*(\n    const Color &amp; l,\n    const Color &amp; r\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-operator_2","title":"function operator*","text":"<pre><code>Color operator*(\n    const Color &amp; l,\n    const float &amp; r\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-operator_3","title":"function operator*","text":"<pre><code>Color operator*(\n    const float &amp; l,\n    const Color &amp; r\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-blend","title":"function blend","text":"<pre><code>Color blend(\n    const Color &amp; a,\n    const Color &amp; b,\n    const float &amp; t\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-map","title":"function map","text":"<pre><code>template &lt;size_t N&gt;\nColor map(\n    const float &amp; v,\n    const std::array&lt; Color, N &gt; &amp; color_map\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-filledcurves","title":"function filledcurves","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2,\nPtrOrMoved U3&gt;\nauto filledcurves(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y1,\n    U3 &amp;&amp; y2\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-filledcurves_1","title":"function filledcurves","text":"<pre><code>template &lt;PtrOrMoved U2,\nPtrOrMoved U3&gt;\nauto filledcurves(\n    U2 &amp;&amp; y1,\n    U3 &amp;&amp; y2\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-heatmap","title":"function heatmap","text":"<pre><code>template &lt;PtrOrMoved U1&gt;\nauto heatmap(\n    U1 &amp;&amp; matrix,\n    size_t rows,\n    size_t columns,\n    std::function&lt; double(const remove_ptr_t&lt; std::remove_reference_t&lt; U1 &gt; &gt; &amp;, size_t, size_t)&gt; at,\n    Text title =\"\"\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-heatmap_1","title":"function heatmap","text":"<pre><code>template &lt;MatrixLike U1&gt;\nauto heatmap(\n    U1 &amp;&amp; matrix\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-heatmap_2","title":"function heatmap","text":"<pre><code>template &lt;MatrixLike U1&gt;\nauto heatmap(\n    U1 * matrix\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-heatmap_3","title":"function heatmap","text":"<pre><code>template &lt;class T ,\nsize_t ROWS,\nsize_t COLS&gt;\nauto heatmap(\n    const T(*) array[ROWS][COLS]\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-to_string","title":"function to_string","text":"<pre><code>std::string_view to_string(\n    ImageFileType filetype\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-image_filetype_from_filename","title":"function image_filetype_from_filename","text":"<pre><code>ImageFileType image_filetype_from_filename(\n    std::string_view filename\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-impulses","title":"function impulses","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2&gt;\nauto impulses(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-impulses_1","title":"function impulses","text":"<pre><code>template &lt;PtrOrMoved U2&gt;\nauto impulses(\n    U2 &amp;&amp; y\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-line","title":"function line","text":"<pre><code>template &lt;PtrOrMoved Ux,\nPtrOrMoved Uy&gt;\nauto line(\n    Ux &amp;&amp; x,\n    Uy &amp;&amp; y\n)\n</code></pre> <p>Construction helper function to create a Line instance with x- and y-coordinate ranges. </p> <p>Parameters: </p> <ul> <li>x : [PtrOrMoved] - The x-coordinate data. Can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A Line instance. </p>"},{"location":"API/Namespaces/namespaceplotpp/#function-line_1","title":"function line","text":"<pre><code>template &lt;PtrOrMoved Uy&gt;\nauto line(\n    Uy &amp;&amp; y\n)\n</code></pre> <p>Construction helper function to create a Line instance with x and y coordinate ranges. </p> <p>Parameters: </p> <ul> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A Line instance. </p>"},{"location":"API/Namespaces/namespaceplotpp/#function-to_command_1","title":"function to_command","text":"<pre><code>std::string_view to_command(\n    LineType dt\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-to_file_ending","title":"function to_file_ending","text":"<pre><code>std::string_view to_file_ending(\n    OutputFileType t\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-to_terminal","title":"function to_terminal","text":"<pre><code>TerminalType to_terminal(\n    OutputFileType t\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-filetype_from_filename","title":"function filetype_from_filename","text":"<pre><code>OutputFileType filetype_from_filename(\n    std::string_view filename\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-piechart","title":"function piechart","text":"<pre><code>template &lt;PtrOrMoved U1,\nclass U2 &gt;\nauto piechart(\n    U1 &amp;&amp; names,\n    const U2 &amp; values\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-piechart_1","title":"function piechart","text":"<pre><code>template &lt;PtrOrMoved U1,\nclass U2 &gt;\nauto piechart(\n    U1 &amp;&amp; names,\n    const U2 * values\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-piechart_2","title":"function piechart","text":"<pre><code>template &lt;PtrOrMoved U2&gt;\nauto piechart(\n    const U2 &amp; values\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-piechart_3","title":"function piechart","text":"<pre><code>template &lt;PtrOrMoved U2&gt;\nauto piechart(\n    const U2 * values\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-points","title":"function points","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2&gt;\nauto points(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y\n)\n</code></pre> <p>Construction helper function to create a Plot instance with x- and y-coordinate ranges. </p> <p>Parameters: </p> <ul> <li>x : [PtrOrMoved] - The x-coordinate data. Can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A Points instance. </p>"},{"location":"API/Namespaces/namespaceplotpp/#function-scatter","title":"function scatter","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2&gt;\nauto scatter(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y\n)\n</code></pre> <p>Construction helper function to create a Plot instance with x- and y-coordinate ranges. </p> <p>Parameters: </p> <ul> <li>x : [PtrOrMoved] - The x-coordinate data. Can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A Points instance. </p> <p>Wrapper to for the function points(U1&amp;&amp; x, U2&amp;&amp; y), to provide another common name used for this kind of plots.</p>"},{"location":"API/Namespaces/namespaceplotpp/#function-points_1","title":"function points","text":"<pre><code>template &lt;PtrOrMoved U2&gt;\nauto points(\n    U2 &amp;&amp; y\n)\n</code></pre> <p>Construction helper function to create a Plot instance with x- and y-coordinate ranges. </p> <p>Parameters: </p> <ul> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A Points instance. </p>"},{"location":"API/Namespaces/namespaceplotpp/#function-scatter_1","title":"function scatter","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2&gt;\nauto scatter(\n    U2 &amp;&amp; y\n)\n</code></pre> <p>Construction helper function to create a Plot instance with x- and y-coordinate ranges. </p> <p>Parameters: </p> <ul> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A Points instance. </p> <p>Wrapper to for the function points(U2&amp;&amp; y), to provide another common name used for this kind of plots.</p>"},{"location":"API/Namespaces/namespaceplotpp/#function-steps","title":"function steps","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2&gt;\nauto steps(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-steps_1","title":"function steps","text":"<pre><code>template &lt;PtrOrMoved U2&gt;\nauto steps(\n    U2 &amp;&amp; y\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-to_command_2","title":"function to_command","text":"<pre><code>std::string_view to_command(\n    TerminalType t\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-operator_4","title":"function operator&lt;&lt;","text":"<pre><code>std::ostream &amp; operator&lt;&lt;(\n    std::ostream &amp; stream,\n    const Text &amp; text\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-xerror","title":"function xerror","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2,\nPtrOrMoved U3&gt;\nauto xerror(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y,\n    U3 &amp;&amp; xerr\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-xyerror","title":"function xyerror","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2,\nPtrOrMoved U3,\nPtrOrMoved U4&gt;\nauto xyerror(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y,\n    U3 &amp;&amp; xerr,\n    U4 &amp;&amp; yerr\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-yerror","title":"function yerror","text":"<pre><code>template &lt;PtrOrMoved U1,\nPtrOrMoved U2,\nPtrOrMoved U3&gt;\nauto yerror(\n    U1 &amp;&amp; x,\n    U2 &amp;&amp; y,\n    U3 &amp;&amp; yerr\n)\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp/#function-yerrorline","title":"function yerrorline","text":"<pre><code>template &lt;PtrOrMoved Ux,\nPtrOrMoved Uy,\nPtrOrMoved Uerr&gt;\nauto yerrorline(\n    Ux &amp;&amp; x,\n    Uy &amp;&amp; y,\n    Uerr &amp;&amp; err\n)\n</code></pre> <p>Construction helper function to create a YErrorLine instance with x- and y-coordinate ranges. </p> <p>Parameters: </p> <ul> <li>x : [PtrOrMoved] - The x-coordinate data. Can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A YErrorLine instance. </p>"},{"location":"API/Namespaces/namespaceplotpp/#function-yerrorline_1","title":"function yerrorline","text":"<pre><code>template &lt;PtrOrMoved Uy,\nPtrOrMoved Uerr&gt;\nauto yerrorline(\n    Uy &amp;&amp; y,\n    Uerr &amp;&amp; err\n)\n</code></pre> <p>Construction helper function to create a YErrorLine instance with x and y coordinate ranges. </p> <p>Parameters: </p> <ul> <li>y : [PtrOrMoved] - The y-coordinate data. can be passed by pointer <code>&amp;x</code> or moved <code>std::move(x)</code>. Also has to satisfy std::ranges::forward_range</li> </ul> <p>Return: A YErrorLine instance. </p> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/","title":"plotpp::color_map","text":""},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#attributes","title":"Attributes","text":"Name std::array&lt; Color, 9 &gt; magma std::array&lt; Color, 9 &gt; inferno std::array&lt; Color, 9 &gt; viridis std::array&lt; Color, 9 &gt; plasma std::array&lt; Color, 7 &gt; jet std::array&lt; Color, 8 &gt; bentcoolwarm std::array&lt; Color, 8 &gt; moreland std::array&lt; Color, 9 &gt; chromajs std::array&lt; Color, 9 &gt; parula std::array&lt; Color, 10 &gt; sand std::array&lt; Color, 9 &gt; turbo std::array&lt; Color, 8 &gt; rainbow std::array&lt; Color, 10 &gt; set1 std::array&lt; Color, 10 &gt; set1_light std::array&lt; Color, 9 &gt; set2 std::array&lt; Color, 9 &gt; set2_light std::array&lt; Color, 8 &gt; set3 std::array&lt; Color, 8 &gt; matlab std::array&lt; Color, 8 &gt; blues std::array&lt; Color, 8 &gt; blue_greens std::array&lt; Color, 8 &gt; blue_purples std::array&lt; Color, 8 &gt; green_blues std::array&lt; Color, 8 &gt; greens std::array&lt; Color, 8 &gt; greys std::array&lt; Color, 8 &gt; oranges std::array&lt; Color, 8 &gt; orange_reds std::array&lt; Color, 8 &gt; yellow_orange_reds std::array&lt; Color, 8 &gt; yellow_orange_browns std::array&lt; Color, 8 &gt; yellow_greens std::array&lt; Color, 8 &gt; reds std::array&lt; Color, 8 &gt; red_purples std::array&lt; Color, 8 &gt; yellow_green_blues std::array&lt; Color, 8 &gt; purples std::array&lt; Color, 8 &gt; purple_reds std::array&lt; Color, 8 &gt; purple_blue_greens std::array&lt; Color, 8 &gt; purple_blues std::array&lt; Color, 8 &gt; brown_white_bluegreen std::array&lt; Color, 10 &gt; green_white_purple std::array&lt; Color, 8 &gt; red_yellow_green std::array&lt; Color, 8 &gt; red_yellow_blue std::array&lt; Color, 8 &gt; red_white_grey std::array&lt; Color, 8 &gt; red_white_blue std::array&lt; Color, 8 &gt; orange_white_purple std::array&lt; Color, 8 &gt; purple_white_green std::array&lt; Color, 8 &gt; pink_white_yellowgreen"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#attributes-documentation","title":"Attributes Documentation","text":""},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-magma","title":"variable magma","text":"<pre><code>std::array&lt; Color, 9 &gt; magma {0x000004, 0x1c1044, 0x4f127b, 0x812581, 0xb5367a, 0xe55964, 0xfb8761, 0xfec287, 0xfbfdbf};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-inferno","title":"variable inferno","text":"<pre><code>std::array&lt; Color, 9 &gt; inferno {0x000004, 0x1f0c48, 0x550f6d, 0x88226a, 0xa83655, 0xe35933, 0xf9950a, 0xf8c932, 0xfcffa4};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-viridis","title":"variable viridis","text":"<pre><code>std::array&lt; Color, 9 &gt; viridis {0x440154, 0x472c7a, 0x3b518b, 0x2c718e, 0x21908d, 0x27ad81, 0x5cc863, 0xaadc32, 0xfde725};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-plasma","title":"variable plasma","text":"<pre><code>std::array&lt; Color, 9 &gt; plasma {0x0c0887, 0x4b03a1, 0x7d03a8, 0xa82296, 0xcb4679, 0xe56b5d, 0xf89441, 0xfdc328, 0xf0f921};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-jet","title":"variable jet","text":"<pre><code>std::array&lt; Color, 7 &gt; jet {0x0000ff, 0x0080ff, 0x00ffff, 0x80ff80, 0xffff00, 0xff8000, 0xff0000};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-bentcoolwarm","title":"variable bentcoolwarm","text":"<pre><code>std::array&lt; Color, 8 &gt; bentcoolwarm {0x5548c1, 0x7982d7, 0xabb8e7, 0xdde3ef, 0xead3c6, 0xdba188, 0xca6b55, 0xb10027};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-moreland","title":"variable moreland","text":"<pre><code>std::array&lt; Color, 8 &gt; moreland {0x3b4cc0, 0x688aef, 0x99baff, 0xc9d8ef, 0xedd1c2, 0xf7a789, 0xe36a53, 0xb40426};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-chromajs","title":"variable chromajs","text":"<pre><code>std::array&lt; Color, 9 &gt; chromajs {0xffffe0, 0xffdfb8, 0xffbc94, 0xff9777, 0xff6962, 0xee4256, 0xd21f47, 0xb0062c, 0x8b0000};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-parula","title":"variable parula","text":"<pre><code>std::array&lt; Color, 9 &gt; parula {0x352a87, 0x0f5cdd, 0x1481d6, 0x06a4ca, 0x2eb7a4, 0x87bf77, 0xd1bb59, 0xfec832, 0xf9fb0e};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-sand","title":"variable sand","text":"<pre><code>std::array&lt; Color, 10 &gt; sand {0x604860, 0x784860, 0xa86060, 0xc07860, 0xf0a848, 0xf8ca8c, 0xfeecae, 0xfff4c2, 0xfff7db, 0xfffcf6};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-turbo","title":"variable turbo","text":"<pre><code>std::array&lt; Color, 9 &gt; turbo {0x30123b, 0x466be3, 0x28bceb, 0x32f298, 0xa4fc3c, 0xeecf3a, 0xfb7e21, 0xd02f05, 0x7a0403};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-rainbow","title":"variable rainbow","text":"<pre><code>std::array&lt; Color, 8 &gt; rainbow {0xD53E4F, 0xF46D43, 0xFDAE61, 0xFEE08B, 0xE6F598, 0xABDDA4, 0x66C2A5, 0x3288BD};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-set1","title":"variable set1","text":"<pre><code>std::array&lt; Color, 10 &gt; set1 {0x1f77b4, 0xff7f0e, 0x2ca02c, 0xd62728, 0x9467bd, 0x8c564b, 0xe377c2, 0x7f7f7f, 0xbcbd22, 0x17becf};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-set1_light","title":"variable set1_light","text":"<pre><code>std::array&lt; Color, 10 &gt; set1_light {0xaec7e8, 0xffbb78, 0x98df8a, 0xff9896, 0xc5b0d5, 0xc49c94, 0xf7b6d2, 0xc7c7c7, 0xdbdb8d, 0x9edae5};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-set2","title":"variable set2","text":"<pre><code>std::array&lt; Color, 9 &gt; set2 {0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xa65628, 0xf781bf, 0x999999, 0xffff33};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-set2_light","title":"variable set2_light","text":"<pre><code>std::array&lt; Color, 9 &gt; set2_light {0xff4244, 0x5fa6e0, 0x75d772, 0xc076cb, 0xffa728, 0xce7e50, 0xffa9e7, 0xc1c1c1, 0xffff5b};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-set3","title":"variable set3","text":"<pre><code>std::array&lt; Color, 8 &gt; set3 {0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-matlab","title":"variable matlab","text":"<pre><code>std::array&lt; Color, 8 &gt; matlab {0x0072bd, 0xd95319, 0xedb120, 0x7e2f8e, 0x77ac30, 0x4dbeee, 0xa2142f};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-blues","title":"variable blues","text":"<pre><code>std::array&lt; Color, 8 &gt; blues {0xF7FBFF, 0xDEEBF7, 0xC6DBEF, 0x9ECAE1, 0x6BAED6, 0x4292C6, 0x2171B5, 0x084594};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-blue_greens","title":"variable blue_greens","text":"<pre><code>std::array&lt; Color, 8 &gt; blue_greens {0xF7FCFD, 0xE5F5F9, 0xCCECE6, 0x99D8C9, 0x66C2A4, 0x41AE76, 0x238B45, 0x005824};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-blue_purples","title":"variable blue_purples","text":"<pre><code>std::array&lt; Color, 8 &gt; blue_purples {0xF7FCFD, 0xE0ECF4, 0xBFD3E6, 0x9EBCDA, 0x8C96C6, 0x8C6BB1, 0x88419D, 0x6E016B};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-green_blues","title":"variable green_blues","text":"<pre><code>std::array&lt; Color, 8 &gt; green_blues {0xF7FCF0, 0xE0F3DB, 0xCCEBC5, 0xA8DDB5, 0x7BCCC4, 0x4EB3D3, 0x2B8CBE, 0x08589E};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-greens","title":"variable greens","text":"<pre><code>std::array&lt; Color, 8 &gt; greens {0xF7FCF5, 0xE5F5E0, 0xC7E9C0, 0xA1D99B, 0x74C476, 0x41AB5D, 0x238B45, 0x005A32};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-greys","title":"variable greys","text":"<pre><code>std::array&lt; Color, 8 &gt; greys {0xFFFFFF, 0xF0F0F0, 0xD9D9D9, 0xBDBDBD, 0x969696, 0x737373, 0x525252, 0x252525};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-oranges","title":"variable oranges","text":"<pre><code>std::array&lt; Color, 8 &gt; oranges {0xFFF5EB, 0xFEE6CE, 0xFDD0A2, 0xFDAE6B, 0xFD8D3C, 0xF16913, 0xD94801, 0x8C2D04};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-orange_reds","title":"variable orange_reds","text":"<pre><code>std::array&lt; Color, 8 &gt; orange_reds {0xFFF7EC, 0xFEE8C8, 0xFDD49E, 0xFDBB84, 0xFC8D59, 0xEF6548, 0xD7301F, 0xCA0D21};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-yellow_orange_reds","title":"variable yellow_orange_reds","text":"<pre><code>std::array&lt; Color, 8 &gt; yellow_orange_reds {0xFFFFCC, 0xFFEDA0, 0xFED976, 0xFEB24C, 0xFD8D3C, 0xFC4E2A, 0xE31A1C, 0xB10026};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-yellow_orange_browns","title":"variable yellow_orange_browns","text":"<pre><code>std::array&lt; Color, 8 &gt; yellow_orange_browns {0xFFFFE5, 0xFFF7BC, 0xFEE391, 0xFEC44F, 0xFE9929, 0xEC7014, 0xCC4C02, 0x8C2D04};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-yellow_greens","title":"variable yellow_greens","text":"<pre><code>std::array&lt; Color, 8 &gt; yellow_greens {0xFFFFE5, 0xF7FCB9, 0xD9F0A3, 0xADDD8E, 0x78C679, 0x41AB5D, 0x238443, 0x005A32};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-reds","title":"variable reds","text":"<pre><code>std::array&lt; Color, 8 &gt; reds {0xFFF5F0, 0xFEE0D2, 0xFCBBA1, 0xFC9272, 0xFB6A4A, 0xEF3B2C, 0xCB181D, 0x99000D};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-red_purples","title":"variable red_purples","text":"<pre><code>std::array&lt; Color, 8 &gt; red_purples {0xFFF7F3, 0xFDE0DD, 0xFCC5C0, 0xFA9FB5, 0xF768A1, 0xDD3497, 0xAE017E, 0x7A0177};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-yellow_green_blues","title":"variable yellow_green_blues","text":"<pre><code>std::array&lt; Color, 8 &gt; yellow_green_blues {0xFFFFD9, 0xEDF8B1, 0xC7E9B4, 0x7FCDBB, 0x41B6C4, 0x1D91C0, 0x225EA8, 0x0C2C84};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-purples","title":"variable purples","text":"<pre><code>std::array&lt; Color, 8 &gt; purples {0xFCFBFD, 0xEFEDF5, 0xDADAEB, 0xBCBDDC, 0x9E9AC8, 0x807DBA, 0x6A51A3, 0x4A1486};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-purple_reds","title":"variable purple_reds","text":"<pre><code>std::array&lt; Color, 8 &gt; purple_reds {0xF7F4F9, 0xE7E1EF, 0xD4B9DA, 0xC994C7, 0xDF65B0, 0xE7298A, 0xCE1256, 0x91003F};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-purple_blue_greens","title":"variable purple_blue_greens","text":"<pre><code>std::array&lt; Color, 8 &gt; purple_blue_greens {0xFFF7FB, 0xECE2F0, 0xD0D1E6, 0xA6BDDB, 0x67A9CF, 0x3690C0, 0x02818A, 0x016540};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-purple_blues","title":"variable purple_blues","text":"<pre><code>std::array&lt; Color, 8 &gt; purple_blues {0xFFF7FB, 0xECE7F2, 0xD0D1E6, 0xA6BDDB, 0x74A9CF, 0x3690C0, 0x0570B0, 0x034E7B};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-brown_white_bluegreen","title":"variable brown_white_bluegreen","text":"<pre><code>std::array&lt; Color, 8 &gt; brown_white_bluegreen {0x8C510A, 0xBF812D, 0xDFC27D, 0xF6E8C3, 0xC7EAE5, 0x80CDC1, 0x35978F, 0x01665E};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-green_white_purple","title":"variable green_white_purple","text":"<pre><code>std::array&lt; Color, 10 &gt; green_white_purple {0x396353, 0x0db14b, 0x6dc067, 0xabd69b, 0xdaeac1, 0xdfcce4, 0xc7b2d6, 0x9474b4, 0x754098, 0x504971};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-red_yellow_green","title":"variable red_yellow_green","text":"<pre><code>std::array&lt; Color, 8 &gt; red_yellow_green {0xD73027, 0xF46D43, 0xFDAE61, 0xFEE08B, 0xD9EF8B, 0xA6D96A, 0x66BD63, 0x1A9850};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-red_yellow_blue","title":"variable red_yellow_blue","text":"<pre><code>std::array&lt; Color, 8 &gt; red_yellow_blue {0xD73027, 0xF46D43, 0xFDAE61, 0xFEE090, 0xE0F3F8, 0xABD9E9, 0x74ADD1, 0x4575B4};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-red_white_grey","title":"variable red_white_grey","text":"<pre><code>std::array&lt; Color, 8 &gt; red_white_grey {0xB2182B, 0xD6604D, 0xF4A582, 0xFDDBC7, 0xE0E0E0, 0xBABABA, 0x878787, 0x4D4D4D};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-red_white_blue","title":"variable red_white_blue","text":"<pre><code>std::array&lt; Color, 8 &gt; red_white_blue {0xB2182B, 0xD6604D, 0xF4A582, 0xFDDBC7, 0xD1E5F0, 0x92C5DE, 0x4393C3, 0x2166AC};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-orange_white_purple","title":"variable orange_white_purple","text":"<pre><code>std::array&lt; Color, 8 &gt; orange_white_purple {0xB35806, 0xE08214, 0xFDB863, 0xFEE0B6, 0xD8DAEB, 0xB2ABD2, 0x8073AC, 0x542788};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-purple_white_green","title":"variable purple_white_green","text":"<pre><code>std::array&lt; Color, 8 &gt; purple_white_green {0x762A83, 0x9970AB, 0xC2A5CF, 0xE7D4E8, 0xD9F0D3, 0xA6DBA0, 0x5AAE61, 0x1B7837};\n</code></pre>"},{"location":"API/Namespaces/namespaceplotpp_1_1color__map/#variable-pink_white_yellowgreen","title":"variable pink_white_yellowgreen","text":"<pre><code>std::array&lt; Color, 8 &gt; pink_white_yellowgreen {0xC51B7D, 0xDE77AE, 0xF1B6DA, 0xFDE0EF, 0xE6F5D0, 0xB8E186, 0x7FBC41, 0x4D922};\n</code></pre> <p>Updated on 2025-03-11 at 16:08:10 +0100</p>"},{"location":"plotting_styles/","title":"Plotting Styles","text":"<ul> <li> <p>Line Class Line | Example</p> <p>Construction Helper line(x, y),  line(y)</p> </li> <li> <p></p> <p>Point/Scatter Class Points | Example</p> <p>Construction Helper points(x, y), points(y) scatter(x, y), scatter(y)</p> </li> <li> <p></p> <p>Impulses Class Impulses | Example</p> <p>Construction Helper impulses(x, y), impulses(y) </p> </li> <li> <p></p> <p>Steps Class Steps | Example</p> <p>Construction Helper steps(x, y), steps(y) </p> </li> <li> <p></p> <p>XError Class XError | Example</p> <p>Construction Helper xerror(x, y, err),</p> </li> <li> <p></p> <p>YError Class YError | Example</p> <p>Construction Helper yerror(x, y, err),</p> </li> <li> <p></p> <p>XYError Class XYError | Example</p> <p>Construction Helper xyerror(x, y, xerr, yerr),</p> </li> <li> <p></p> <p>YErrorLine Class YErrorLine | Example</p> <p>Construction Helper yerrorline(x, y, err), yerrorline(y, err)</p> </li> <li> <p></p> <p>Filled Curve Class FilledCurve | Example</p> <p>Construction Helper filledcurves(x, y, err), filledcurves(y, err)</p> </li> <li> <p></p> <p>Arrow/Vector/Quiver Class Arrows | Example</p> <p>Construction Helper arrows(x1, y1, x2, y2), vector(x1, y1, x2, y2), quiver(x, y, u, v)</p> </li> <li> <p></p> <p>Boxes Class Boxes | Example</p> <p>Construction Helper boxes(x, y), boxes(y)</p> </li> <li> <p></p> <p>Boxplot Class Boxplot | Example</p> <p>Construction Helper boxplot(x, y), boxplot(y)</p> </li> <li> <p></p> <p>Heatmap Class Heatmap | Example</p> <p>Construction Helper heatmap(matrix, rows, columns, at_function), heatmap(matrix)</p> </li> <li> <p></p> <p>Circle Class Circle | Example </p> <p>Construction Helper circle(x, y, radius, startAngleDeg, stopAngleDeg)</p> </li> <li> <p></p> <p>Piechart Class Piechart | Example</p> <p>Construction Helper piechart(names, values), piechart(values),</p> </li> <li> <p></p> <p>Multi Plot Class Multiplot | Example </p> </li> <li> <p></p> <p>Bode Plot Example</p> <p>Construction Helper bode(frequ, amp_dB, phase_deg)</p> </li> </ul>"}]}